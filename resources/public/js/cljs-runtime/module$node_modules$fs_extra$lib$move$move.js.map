{
"version":3,
"file":"module$node_modules$fs_extra$lib$move$move.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/fs-extra/lib/move/move.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fs_extra$lib$move$move\"] = function(global,require,module,exports) {\n'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\nconst stat = require('../util/stat')\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, isChangingCase = false } = stats\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err)\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb)\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err)\n        return doRename(src, dest, overwrite, isChangingCase, cb)\n      })\n    })\n  })\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb)\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nmodule.exports = move\n\n};"],
"names":["shadow$provide","global","require","module","exports","isParentRoot","dest","parent","path","dirname","parse","parsedPath","root","doRename","src","overwrite","isChangingCase","cb","rename","remove","err","pathExists","destExists","Error","fs","code","moveAcrossDevice","copy","opts","errorOnExist","preserveTimestamps","mkdirp","stat","move","clobber","checkPaths","stats","srcStat","checkParentPaths"]
}
