{
"version":3,
"file":"goog.fs.fs.js",
"lineCount":34,
"mappings":"AAgBAA,IAAKC,CAAAA,OAAL,CAAa,SAAb,CAAA;AAEAD,IAAKE,CAAAA,OAAL,CAAa,qBAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,eAAb,CAAA;AACAF,IAAKE,CAAAA,OAAL,CAAa,wBAAb,CAAA;AAYAF,IAAKG,CAAAA,EAAGC,CAAAA,IAAR,GAAeC,QAAQ,CAACC,IAAD,EAAOC,IAAP,CAAa;AAElC,QAAMC,oBACFR,IAAKS,CAAAA,MAAOD,CAAAA,iBADVA,IAC+BR,IAAKS,CAAAA,MAAOC,CAAAA,uBADjD;AAGA,MAAI,MAAOF,kBAAX,KAAiC,UAAjC;AACE,WAAOR,IAAKW,CAAAA,KAAMC,CAAAA,QAASC,CAAAA,IAApB,CAAyB,IAAIC,KAAJ,CAAU,sBAAV,CAAzB,CAAP;AADF;AAIA,QAAMC,IAAI,IAAIf,IAAKW,CAAAA,KAAMC,CAAAA,QAAf,EAAV;AACAJ,mBAAA,CACIF,IADJ,EACUC,IADV,EAEI,QAAQ,CAACJ,EAAD,CAAK;AAEXY,KAAEC,CAAAA,QAAF,CAAW,IAAIhB,IAAKG,CAAAA,EAAGc,CAAAA,cAAZ,CAA2Bd,EAA3B,CAAX,CAAA;AAFW,GAFjB,EAMI,QAAQ,CAACe,GAAD,CAAM;AAEZH,KAAEI,CAAAA,OAAF,CAAU,IAAInB,IAAKG,CAAAA,EAAGW,CAAAA,KAAZ,CAAkBI,GAAlB,EAAuB,uBAAvB,CAAV,CAAA;AAFY,GANlB,CAAA;AAUA,SAAOH,CAAP;AApBkC,CAApC;AA8BAf,IAAKG,CAAAA,EAAGiB,CAAAA,eAAR,GAA0B,CAIxBC,UAAW,CAJa,EASxBC,WAAY,CATY,CAA1B;AAqBAtB,IAAKG,CAAAA,EAAGoB,CAAAA,YAAR,GAAuBC,QAAQ,CAACjB,IAAD,CAAO;AAEpC,SAAOP,IAAKG,CAAAA,EAAGC,CAAAA,IAAR,CAAaJ,IAAKG,CAAAA,EAAGiB,CAAAA,eAAgBC,CAAAA,SAArC,EAAgDd,IAAhD,CAAP;AAFoC,CAAtC;AAcAP,IAAKG,CAAAA,EAAGsB,CAAAA,aAAR,GAAwBC,QAAQ,CAACnB,IAAD,CAAO;AAErC,SAAOP,IAAKG,CAAAA,EAAGC,CAAAA,IAAR,CAAaJ,IAAKG,CAAAA,EAAGiB,CAAAA,eAAgBE,CAAAA,UAArC,EAAiDf,IAAjD,CAAP;AAFqC,CAAvC;AAkBAP,IAAKG,CAAAA,EAAGwB,CAAAA,SAAR,GAAoBC,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,OAAd,CAAuB;AAEjD,MAAIA,OAAJ,KAAgBC,SAAhB;AACED,WAAA,GAAUF,IAAKtB,CAAAA,IAAf;AADF;AAGA,MAAIsB,IAAKI,CAAAA,KAAT;AACE,WAAOJ,IAAKI,CAAAA,KAAL,CAAWH,KAAX,EAAkBC,OAAlB,CAAP;AADF;AAGA,SAAO,IAAP;AARiD,CAAnD;;",
"sources":["goog/fs/fs.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Wrappers for the HTML5 File API. These wrappers closely mirror\n * the underlying APIs, but use Closure-style events and Deferred return values.\n * Their existence also makes it possible to mock the FileSystem API for testing\n * in browsers that don't support it natively.\n *\n * When adding public functions to anything under this namespace, be sure to add\n * its mock counterpart to goog.testing.fs.\n */\n\ngoog.provide('goog.fs');\n\ngoog.require('goog.async.Deferred');\ngoog.require('goog.fs.Error');\ngoog.require('goog.fs.FileSystemImpl');\n\n\n/**\n * Get a wrapped FileSystem object.\n *\n * @param {goog.fs.FileSystemType_} type The type of the filesystem to get.\n * @param {number} size The size requested for the filesystem, in bytes.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileSystem}. If an\n *     error occurs, the errback is called with a {@link goog.fs.Error}.\n * @private\n */\ngoog.fs.get_ = function(type, size) {\n  'use strict';\n  const requestFileSystem =\n      goog.global.requestFileSystem || goog.global.webkitRequestFileSystem;\n\n  if (typeof requestFileSystem !== 'function') {\n    return goog.async.Deferred.fail(new Error('File API unsupported'));\n  }\n\n  const d = new goog.async.Deferred();\n  requestFileSystem(\n      type, size,\n      function(fs) {\n        'use strict';\n        d.callback(new goog.fs.FileSystemImpl(fs));\n      },\n      function(err) {\n        'use strict';\n        d.errback(new goog.fs.Error(err, 'requesting filesystem'));\n      });\n  return d;\n};\n\n\n/**\n * The two types of filesystem.\n *\n * @enum {number}\n * @private\n */\ngoog.fs.FileSystemType_ = {\n  /**\n   * A temporary filesystem may be deleted by the user agent at its discretion.\n   */\n  TEMPORARY: 0,\n  /**\n   * A persistent filesystem will never be deleted without the user's or\n   * application's authorization.\n   */\n  PERSISTENT: 1\n};\n\n\n/**\n * Returns a temporary FileSystem object. A temporary filesystem may be deleted\n * by the user agent at its discretion.\n *\n * @param {number} size The size requested for the filesystem, in bytes.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileSystem}. If an\n *     error occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.getTemporary = function(size) {\n  'use strict';\n  return goog.fs.get_(goog.fs.FileSystemType_.TEMPORARY, size);\n};\n\n\n/**\n * Returns a persistent FileSystem object. A persistent filesystem will never be\n * deleted without the user's or application's authorization.\n *\n * @param {number} size The size requested for the filesystem, in bytes.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileSystem}. If an\n *     error occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.getPersistent = function(size) {\n  'use strict';\n  return goog.fs.get_(goog.fs.FileSystemType_.PERSISTENT, size);\n};\n\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices can be used\n * to count bytes from the end of the blob (-1 == blob.size - 1). Indices\n * are always clamped to blob range. If end is omitted, all the data till\n * the end of the blob is taken.\n *\n * @param {!Blob} blob The blob to be sliced.\n * @param {number} start Index of the starting byte.\n * @param {number=} opt_end Index of the ending byte.\n * @return {Blob} The blob slice or null if not supported.\n */\ngoog.fs.sliceBlob = function(blob, start, opt_end) {\n  'use strict';\n  if (opt_end === undefined) {\n    opt_end = blob.size;\n  }\n  if (blob.slice) {\n    return blob.slice(start, opt_end);\n  }\n  return null;\n};\n"],
"names":["goog","provide","require","fs","get_","goog.fs.get_","type","size","requestFileSystem","global","webkitRequestFileSystem","async","Deferred","fail","Error","d","callback","FileSystemImpl","err","errback","FileSystemType_","TEMPORARY","PERSISTENT","getTemporary","goog.fs.getTemporary","getPersistent","goog.fs.getPersistent","sliceBlob","goog.fs.sliceBlob","blob","start","opt_end","undefined","slice"]
}
