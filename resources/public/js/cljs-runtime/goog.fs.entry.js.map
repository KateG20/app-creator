{
"version":3,
"file":"goog.fs.entry.js",
"lineCount":57,
"mappings":"AAaAA,IAAKC,CAAAA,OAAL,CAAa,wBAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,iCAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,eAAb,CAAA;AACAD,IAAKC,CAAAA,OAAL,CAAa,mBAAb,CAAA;AAEAD,IAAKE,CAAAA,WAAL,CAAiB,qBAAjB,CAAA;AACAF,IAAKE,CAAAA,WAAL,CAAiB,oBAAjB,CAAA;AACAF,IAAKE,CAAAA,WAAL,CAAiB,oBAAjB,CAAA;AAQAF,IAAKG,CAAAA,EAAGC,CAAAA,KAAR,GAAgBC,QAAQ,EAAG;CAA3B;AAMAL,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUC,CAAAA,MAAxB,GAAiCC,QAAQ,EAAG;CAA5C;AAMAR,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUG,CAAAA,WAAxB,GAAsCC,QAAQ,EAAG;CAAjD;AAMAV,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUK,CAAAA,OAAxB,GAAkCC,QAAQ,EAAG;CAA7C;AAMAZ,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUO,CAAAA,WAAxB,GAAsCC,QAAQ,EAAG;CAAjD;AAMAd,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUS,CAAAA,aAAxB,GAAwCC,QAAQ,EAAG;CAAnD;AASAhB,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUW,CAAAA,eAAxB,GAA0CC,QAAQ,EAAG;CAArD;AASAlB,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUa,CAAAA,WAAxB,GAAsCC,QAAQ,EAAG;CAAjD;AAaApB,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUe,CAAAA,MAAxB,GAAiCC,QAAQ,CAACC,MAAD,EAASC,WAAT,CAAsB;CAA/D;AAaAxB,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUmB,CAAAA,MAAxB,GAAiCC,QAAQ,CAACH,MAAD,EAASC,WAAT,CAAsB;CAA/D;AAUAxB,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUqB,CAAAA,SAAxB,GAAoCC,QAAQ,CAACC,KAAD,CAAQ;CAApD;AASA7B,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAUwB,CAAAA,KAAxB,GAAgCC,QAAQ,CAACC,YAAD,CAAe;CAAvD;AAUAhC,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAU2B,CAAAA,KAAxB,GAAgCC,QAAQ,CAACF,YAAD,CAAe;CAAvD;AAUAhC,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAU6B,CAAAA,MAAxB,GAAiCC,QAAQ,EAAG;CAA5C;AASApC,IAAKG,CAAAA,EAAGC,CAAAA,KAAME,CAAAA,SAAU+B,CAAAA,SAAxB,GAAoCC,QAAQ,EAAG;CAA/C;AAUAtC,IAAKG,CAAAA,EAAGoC,CAAAA,cAAR,GAAyBC,QAAQ,EAAG;CAApC;AAOAxC,IAAKG,CAAAA,EAAGoC,CAAAA,cAAeE,CAAAA,QAAvB,GAAkC,CAIhCC,QAAS,CAJuB,EAQhCC,OAAQ,CARwB,EAYhCC,iBAAkB,CAZc,CAAlC;AAyBA5C,IAAKG,CAAAA,EAAGoC,CAAAA,cAAejC,CAAAA,SAAUuC,CAAAA,OAAjC,GAA2CC,QAAQ,CAACC,IAAD,EAAOC,YAAP,CAAqB;CAAxE;AAYAhD,IAAKG,CAAAA,EAAGoC,CAAAA,cAAejC,CAAAA,SAAU2C,CAAAA,YAAjC,GAAgDC,QAAQ,CAACH,IAAD,EAAOC,YAAP,CAAqB;CAA7E;AAcAhD,IAAKG,CAAAA,EAAGoC,CAAAA,cAAejC,CAAAA,SAAU6C,CAAAA,UAAjC,GAA8CC,QAAQ,CAACL,IAAD,CAAO;CAA7D;AAUA/C,IAAKG,CAAAA,EAAGoC,CAAAA,cAAejC,CAAAA,SAAU+C,CAAAA,aAAjC,GAAiDC,QAAQ,EAAG;CAA5D;AAUAtD,IAAKG,CAAAA,EAAGoC,CAAAA,cAAejC,CAAAA,SAAUiD,CAAAA,iBAAjC,GAAqDC,QAAQ,EAAG;CAAhE;AAUAxD,IAAKG,CAAAA,EAAGsD,CAAAA,SAAR,GAAoBC,QAAQ,EAAG;CAA/B;AASA1D,IAAKG,CAAAA,EAAGsD,CAAAA,SAAUnD,CAAAA,SAAUqD,CAAAA,YAA5B,GAA2CC,QAAQ,EAAG;CAAtD;AASA5D,IAAKG,CAAAA,EAAGsD,CAAAA,SAAUnD,CAAAA,SAAUuD,CAAAA,IAA5B,GAAmCC,QAAQ,EAAG;CAA9C;;",
"sources":["goog/fs/entry.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Wrappers for HTML5 Entry objects. These are all in the same\n * file to avoid circular dependency issues.\n *\n * When adding or modifying functionality in this namespace, be sure to update\n * the mock counterparts in goog.testing.fs.\n */\ngoog.provide('goog.fs.DirectoryEntry');\ngoog.provide('goog.fs.DirectoryEntry.Behavior');\ngoog.provide('goog.fs.Entry');\ngoog.provide('goog.fs.FileEntry');\n\ngoog.requireType('goog.async.Deferred');\ngoog.requireType('goog.fs.FileSystem');\ngoog.requireType('goog.fs.FileWriter');\n\n\n\n/**\n * The interface for entries in the filesystem.\n * @interface\n */\ngoog.fs.Entry = function() {};\n\n\n/**\n * @return {boolean} Whether or not this entry is a file.\n */\ngoog.fs.Entry.prototype.isFile = function() {};\n\n\n/**\n * @return {boolean} Whether or not this entry is a directory.\n */\ngoog.fs.Entry.prototype.isDirectory = function() {};\n\n\n/**\n * @return {string} The name of this entry.\n */\ngoog.fs.Entry.prototype.getName = function() {};\n\n\n/**\n * @return {string} The full path to this entry.\n */\ngoog.fs.Entry.prototype.getFullPath = function() {};\n\n\n/**\n * @return {!goog.fs.FileSystem} The filesystem backing this entry.\n */\ngoog.fs.Entry.prototype.getFileSystem = function() {};\n\n\n/**\n * Retrieves the last modified date for this entry.\n *\n * @return {!goog.async.Deferred} The deferred Date for this entry. If an error\n *     occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.getLastModified = function() {};\n\n\n/**\n * Retrieves the metadata for this entry.\n *\n * @return {!goog.async.Deferred} The deferred Metadata for this entry. If an\n *     error occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.getMetadata = function() {};\n\n\n/**\n * Move this entry to a new location.\n *\n * @param {!goog.fs.DirectoryEntry} parent The new parent directory.\n * @param {string=} opt_newName The new name of the entry. If omitted, the entry\n *     retains its original name.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileEntry} or\n *     {@link goog.fs.DirectoryEntry} for the new entry. If an error occurs, the\n *     errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.moveTo = function(parent, opt_newName) {};\n\n\n/**\n * Copy this entry to a new location.\n *\n * @param {!goog.fs.DirectoryEntry} parent The new parent directory.\n * @param {string=} opt_newName The name of the new entry. If omitted, the new\n *     entry has the same name as the original.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileEntry} or\n *     {@link goog.fs.DirectoryEntry} for the new entry. If an error occurs, the\n *     errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.copyTo = function(parent, opt_newName) {};\n\n\n/**\n * Wrap an HTML5 entry object in an appropriate subclass instance.\n *\n * @param {!Entry} entry The underlying Entry object.\n * @return {!goog.fs.Entry} The appropriate subclass wrapper.\n * @protected\n */\ngoog.fs.Entry.prototype.wrapEntry = function(entry) {};\n\n\n/**\n * Get the URL for this file.\n *\n * @param {string=} opt_mimeType The MIME type that will be served for the URL.\n * @return {string} The URL.\n */\ngoog.fs.Entry.prototype.toUrl = function(opt_mimeType) {};\n\n\n/**\n * Get the URI for this file.\n *\n * @deprecated Use {@link #toUrl} instead.\n * @param {string=} opt_mimeType The MIME type that will be served for the URI.\n * @return {string} The URI.\n */\ngoog.fs.Entry.prototype.toUri = function(opt_mimeType) {};\n\n\n/**\n * Remove this entry.\n *\n * @return {!goog.async.Deferred} A deferred object. If the removal succeeds,\n *     the callback is called with true. If an error occurs, the errback is\n *     called a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.remove = function() {};\n\n\n/**\n * Gets the parent directory.\n *\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.DirectoryEntry}.\n *     If an error occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.Entry.prototype.getParent = function() {};\n\n\n\n/**\n * A directory in a local FileSystem.\n *\n * @interface\n * @extends {goog.fs.Entry}\n */\ngoog.fs.DirectoryEntry = function() {};\n\n\n/**\n * Behaviors for getting files and directories.\n * @enum {number}\n */\ngoog.fs.DirectoryEntry.Behavior = {\n  /**\n   * Get the file if it exists, error out if it doesn't.\n   */\n  DEFAULT: 1,\n  /**\n   * Get the file if it exists, create it if it doesn't.\n   */\n  CREATE: 2,\n  /**\n   * Error out if the file exists, create it if it doesn't.\n   */\n  CREATE_EXCLUSIVE: 3\n};\n\n\n/**\n * Get a file in the directory.\n *\n * @param {string} path The path to the file, relative to this directory.\n * @param {goog.fs.DirectoryEntry.Behavior=} opt_behavior The behavior for\n *     handling an existing file, or the lack thereof.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.FileEntry}. If an\n *     error occurs, the errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.DirectoryEntry.prototype.getFile = function(path, opt_behavior) {};\n\n\n/**\n * Get a directory within this directory.\n *\n * @param {string} path The path to the directory, relative to this directory.\n * @param {goog.fs.DirectoryEntry.Behavior=} opt_behavior The behavior for\n *     handling an existing directory, or the lack thereof.\n * @return {!goog.async.Deferred} The deferred {@link goog.fs.DirectoryEntry}.\n *     If an error occurs, the errback is called a {@link goog.fs.Error}.\n */\ngoog.fs.DirectoryEntry.prototype.getDirectory = function(path, opt_behavior) {};\n\n\n/**\n * Opens the directory for the specified path, creating the directory and any\n * intermediate directories as necessary.\n *\n * @param {string} path The directory path to create. May be absolute or\n *     relative to the current directory. The parent directory \"..\" and current\n *     directory \".\" are supported.\n * @return {!goog.async.Deferred} A deferred {@link goog.fs.DirectoryEntry} for\n *     the requested path. If an error occurs, the errback is called with a\n *     {@link goog.fs.Error}.\n */\ngoog.fs.DirectoryEntry.prototype.createPath = function(path) {};\n\n\n/**\n * Gets a list of all entries in this directory.\n *\n * @return {!goog.async.Deferred} The deferred list of {@link goog.fs.Entry}\n *     results. If an error occurs, the errback is called with a\n *     {@link goog.fs.Error}.\n */\ngoog.fs.DirectoryEntry.prototype.listDirectory = function() {};\n\n\n/**\n * Removes this directory and all its contents.\n *\n * @return {!goog.async.Deferred} A deferred object. If the removal succeeds,\n *     the callback is called with true. If an error occurs, the errback is\n *     called a {@link goog.fs.Error}.\n */\ngoog.fs.DirectoryEntry.prototype.removeRecursively = function() {};\n\n\n\n/**\n * A file in a local filesystem.\n *\n * @interface\n * @extends {goog.fs.Entry}\n */\ngoog.fs.FileEntry = function() {};\n\n\n/**\n * Create a writer for writing to the file.\n *\n * @return {!goog.async.Deferred<!goog.fs.FileWriter>} If an error occurs, the\n *     errback is called with a {@link goog.fs.Error}.\n */\ngoog.fs.FileEntry.prototype.createWriter = function() {};\n\n\n/**\n * Get the file contents as a File blob.\n *\n * @return {!goog.async.Deferred<!File>} If an error occurs, the errback is\n *     called with a {@link goog.fs.Error}.\n */\ngoog.fs.FileEntry.prototype.file = function() {};\n"],
"names":["goog","provide","requireType","fs","Entry","goog.fs.Entry","prototype","isFile","goog.fs.Entry.prototype.isFile","isDirectory","goog.fs.Entry.prototype.isDirectory","getName","goog.fs.Entry.prototype.getName","getFullPath","goog.fs.Entry.prototype.getFullPath","getFileSystem","goog.fs.Entry.prototype.getFileSystem","getLastModified","goog.fs.Entry.prototype.getLastModified","getMetadata","goog.fs.Entry.prototype.getMetadata","moveTo","goog.fs.Entry.prototype.moveTo","parent","opt_newName","copyTo","goog.fs.Entry.prototype.copyTo","wrapEntry","goog.fs.Entry.prototype.wrapEntry","entry","toUrl","goog.fs.Entry.prototype.toUrl","opt_mimeType","toUri","goog.fs.Entry.prototype.toUri","remove","goog.fs.Entry.prototype.remove","getParent","goog.fs.Entry.prototype.getParent","DirectoryEntry","goog.fs.DirectoryEntry","Behavior","DEFAULT","CREATE","CREATE_EXCLUSIVE","getFile","goog.fs.DirectoryEntry.prototype.getFile","path","opt_behavior","getDirectory","goog.fs.DirectoryEntry.prototype.getDirectory","createPath","goog.fs.DirectoryEntry.prototype.createPath","listDirectory","goog.fs.DirectoryEntry.prototype.listDirectory","removeRecursively","goog.fs.DirectoryEntry.prototype.removeRecursively","FileEntry","goog.fs.FileEntry","createWriter","goog.fs.FileEntry.prototype.createWriter","file","goog.fs.FileEntry.prototype.file"]
}
