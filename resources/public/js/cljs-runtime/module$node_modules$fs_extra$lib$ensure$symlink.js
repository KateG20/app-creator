shadow$provide.module$node_modules$fs_extra$lib$ensure$symlink=function(global,require,module,exports){function _createSymlink(srcpath,dstpath,type$jscomp$0,callback){symlinkPaths(srcpath,dstpath,(err$jscomp$2,relative)=>{if(err$jscomp$2)return callback(err$jscomp$2);srcpath=relative.toDst;symlinkType(relative.toCwd,type$jscomp$0,(err$jscomp$1,type)=>{if(err$jscomp$1)return callback(err$jscomp$1);const dir=path.dirname(dstpath);pathExists(dir,(err$jscomp$0,dirExists)=>{if(err$jscomp$0)return callback(err$jscomp$0);
if(dirExists)return fs.symlink(srcpath,dstpath,type,callback);mkdirs(dir,err=>{if(err)return callback(err);fs.symlink(srcpath,dstpath,type,callback)})})})})}global=require("module$node_modules$universalify$index").fromCallback;const path=require("module$node_modules$path_browserify$index"),fs=require("module$node_modules$fs_extra$lib$fs$index");exports=require("module$node_modules$fs_extra$lib$mkdirs$index");const mkdirs=exports.mkdirs,mkdirsSync=exports.mkdirsSync;exports=require("module$node_modules$fs_extra$lib$ensure$symlink_paths");
const symlinkPaths=exports.symlinkPaths,symlinkPathsSync=exports.symlinkPathsSync;exports=require("module$node_modules$fs_extra$lib$ensure$symlink_type");const symlinkType=exports.symlinkType,symlinkTypeSync=exports.symlinkTypeSync,pathExists=require("module$node_modules$fs_extra$lib$path_exists$index").pathExists,{areIdentical}=require("module$node_modules$fs_extra$lib$util$stat");module.exports={createSymlink:global(function(srcpath,dstpath,type,callback){callback="function"===typeof type?type:
callback;type="function"===typeof type?!1:type;fs.lstat(dstpath,(err,stats)=>{!err&&stats.isSymbolicLink()?Promise.all([fs.stat(srcpath),fs.stat(dstpath)]).then(([srcStat,dstStat])=>{if(areIdentical(srcStat,dstStat))return callback(null);_createSymlink(srcpath,dstpath,type,callback)}):_createSymlink(srcpath,dstpath,type,callback)})}),createSymlinkSync:function(srcpath,dstpath,type){try{var stats=fs.lstatSync(dstpath)}catch{}if(stats&&stats.isSymbolicLink()){stats=fs.statSync(srcpath);const dstStat=
fs.statSync(dstpath);if(areIdentical(stats,dstStat))return}stats=symlinkPathsSync(srcpath,dstpath);srcpath=stats.toDst;type=symlinkTypeSync(stats.toCwd,type);stats=path.dirname(dstpath);if(fs.existsSync(stats))return fs.symlinkSync(srcpath,dstpath,type);mkdirsSync(stats);return fs.symlinkSync(srcpath,dstpath,type)}}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$ensure$symlink.js.map
