{"version":3,"sources":["app_creator/client/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","stored-data","js/window","empty-data","app-creator.client.init/init-db","cljs.core.println","cljs.core.assoc","cljs.reader.read_string","re_frame.core.reg_event_fx","p__55937","map__55938","cljs.core/--destructure-map","cljs.core.get","db","db-with-empty-data","re-frame.core/reg-fx","new-db","cljs.core.pr_str","app-creator.client.events/input-update-handler","is-valid-func","place","p__55939","p__55940","map__55941","vec__55942","cljs.core.nth","new-value","is-valid","updated-db","cljs.core/assoc-in","cljs.core.conj","var_args","G__55946","app-creator.client.events/radio-check-handler","js/Error","p__55947","p__55948","map__55949","vec__55950","opts?","p__55953","p__55954","map__55955","vec__55956","opt-keyword","p__55959","p__55960","map__55961","vec__55962","response","p__55965","p__55966","map__55967","vec__55968","details","p__55971","p__55972","map__55973","vec__55974","cofx","val","ajax.core/json-request-format","ajax.core/json-response-format","p__55977","map__55978","data-valid","app-creator.client.ui.validator/whole-map-valid?","out-dir-path","cljs.core.get_in","out-dir-exists","app-creator.client.ui.validator/directory-exists?","p__55979","vec__55980","loading?","app-creator.client.ui.validator/valid-dir?","app_creator.client.events.radio_check_handler","app-creator.client.ui.validator/valid-host?","p__55983","p__55984","map__55985","vec__55986","box","p__55989","p__55990","map__55991","vec__55992","row","p__55995","p__55996","map__55997","vec__55998","p__56001","p__56002","map__56003","vec__56004","new-item","cljs.core.update_in","cljs.core/conj","p__56007","p__56008","map__56009","vec__56010","cljs.core/first","cljs.core/second","app-creator.client.events/remove-elem","coll","pred","cljs.core/vec","cljs.core.remove","p__56015","p__56016","map__56017","vec__56018","id","p1__56013#","cljs.core._EQ_","p1__56014#","cljs.core/dissoc","p__56022","p__56023","map__56024","vec__56025","t-id","col-id","p1__56021#","p__56028","p__56029","map__56030","vec__56031","prop-keyword","G__56034","cljs.core/Keyword","p__56035","p__56036","map__56037","vec__56038","p__56041","p__56042","map__56043","vec__56044","p__56047","p__56048","map__56049","vec__56050","p__56053","p__56054","map__56055","vec__56056","p__56059","p__56060","map__56061","vec__56062","p__56065","p__56066","map__56067","vec__56068","p__56071","p__56072","map__56073","vec__56074","G__56077","p__56078","p__56079","map__56080","vec__56081","app-creator.client.ui.validator/valid-url?","p__56084","p__56085","map__56086","vec__56087","app-creator.client.ui.validator/valid-java-name?","p__56090","p__56091","map__56092","vec__56093","app-creator.client.ui.validator/valid-req-type?","p__56096","p__56097","map__56098","vec__56099","p__56102","p__56103","map__56104","vec__56105","p__56108","p__56109","map__56110","vec__56111","type-keyword","G__56114","p__56115","p__56116","map__56117","vec__56118","p__56121","p__56122","map__56123","vec__56124","p__56127","p__56128","map__56129","vec__56130"],"sourcesContent":["(ns app-creator.client.events\r\n  (:require [re-frame.core :as re-frame]\r\n            [day8.re-frame.http-fx]\r\n            [ajax.core :as ajax]\r\n            [app-creator.client.ui.validator :as v]\r\n            [app-creator.client.init :as init]\r\n            [cljs.reader :as r]))\r\n\r\n; \u0421 \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c\u0438 \u0432\u0441\u0451 \u043f\u043e\u043d\u044f\u0442\u043d\u043e, \u0442\u0443\u0442 \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u043a\u043b\u044e\u0447\u0443\r\n; \u0438\u0445 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0438\u0442\u044c \u0432 \u043d\u0443\u0436\u043d\u044b\u0445 \u043c\u0435\u0441\u0442\u0430\u0445. \u041c\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u043c\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043d\u044f\u0442\u044c, \u043a\u0430\u043a \u043a\u0443\u0434\u0430 \u0438 \u0447\u0442\u043e\r\n; \u0432 \u043d\u0438\u0445 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0438\u0441\u0430\u0442\u044c, \u043d\u043e \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0432\u0441\u0451 \u0438\u0437\u0438\u0447\u043d\u043e.\r\n\r\n; \u0421\u043e\u0431\u044b\u0442\u0438\u0435 \u0434\u043b\u044f \u0438\u043d\u0438\u0446\u0438\u0430\u0446\u0438\u0438 \u0434\u0431 (\u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 run, \u043f\u0435\u0440\u0435\u0434 \u0440\u0435\u043d\u0434\u0435\u0440\u043e\u043c)\r\n(re-frame/reg-event-db                                      ;; sets up initial application state\r\n  ::initialize\r\n  (fn [_ _]                                                 ;; arguments not important, so use _\r\n    (let [stored-data (.getItem (.-localStorage js/window) :all-data)\r\n          empty-data init/init-db]\r\n      (println stored-data)\r\n      (if stored-data\r\n        (assoc empty-data :data (r/read-string stored-data))\r\n        empty-data)\r\n      ;empty-data\r\n      )))                                                   ; https://day8.github.io/re-frame/dominoes-live/#initialize\r\n\r\n; clears only :data value! Not :loading, nor :log-text, nor anything else outside :data\r\n(re-frame/reg-event-fx\r\n  ::clear-data\r\n  (fn [{:keys [db]} _]\r\n    (let [db-with-empty-data (assoc db :data (get init/init-db :data))]\r\n      {:db             db-with-empty-data\r\n       :update-storage db-with-empty-data})))\r\n\r\n; updates only :data value! Not :loading, nor :log-text, nor anything else outside :data\r\n(re-frame/reg-fx\r\n  :update-storage\r\n  (fn [new-db]\r\n    ;(println new-db)\r\n    (.setItem (.-localStorage js/window) :all-data (pr-str (:data new-db)))))\r\n\r\n(defn input-update-handler [is-valid-func place]\r\n  (fn [{db :db} [_ new-value]]\r\n    (let [is-valid (some? (is-valid-func new-value))\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(defn radio-check-handler\r\n  ([place]\r\n   (fn [{db :db} [_ new-value]]\r\n     (let [updated-db (assoc-in db place new-value)]\r\n       {:db             updated-db\r\n        :update-storage updated-db})))\r\n  ([place opts?]\r\n   (fn [{db :db} [_ opt-keyword new-value]]\r\n     (let [updated-db (assoc-in db (conj place opt-keyword) new-value)]\r\n       {:db             updated-db\r\n        :update-storage updated-db}))))\r\n\r\n(re-frame/reg-event-fx\r\n  ::success-post-result\r\n  (fn [{db :db} [_ response]]\r\n    {:db (assoc db :loading false\r\n                   :log-text (str \"Finished! \" response))}))\r\n\r\n(re-frame/reg-event-fx\r\n  ::failure-post-result\r\n  (fn [{db :db} [_ details]]\r\n    {:db (assoc db :loading false\r\n                   :log-text (str \"Something went wrong! \" (:debug-message details) \". Server may be down. \\n\" details))}))\r\n\r\n; :params - \"GET will add params onto the query string, POST will put the params in the body\"\r\n; but there are also :body and :url-params.\r\n\r\n(re-frame/reg-event-fx\r\n  ::http-post\r\n  (fn [{:keys [db] :as cofx} [_ val]]\r\n    {:http-xhrio {:method          :post\r\n                  :uri             \"http://localhost:80/api/v1/create\"\r\n                  :params          (:data db)\r\n                  :headers         {\"Content-Type\" \"application/json\"}\r\n                  :format          (ajax/json-request-format)\r\n                  :response-format (ajax/json-response-format {:keywords? true})\r\n                  :on-success      [::success-post-result]\r\n                  :on-failure      [::failure-post-result]}}))\r\n\r\n;(def global-path (get-in re-frame.db/app-db [:data :out-path :value]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::create-projects\r\n  (fn [{db :db} _]\r\n    (let [data-valid (v/whole-map-valid? (:data db))\r\n          ;onee 1\r\n          out-dir-path (get-in db [:data :out-path :value])\r\n          out-dir-exists (v/directory-exists? out-dir-path)\r\n          ;out-dir-exists (v/my-macro (onee + onee))\r\n          ;foooo (v/infix (onee + onee))\r\n          ;out-dir-exists (v/my-macro \"C:\\\\Users\\\\Lenovo X1\\\\Downloads\\\\ttttt\")\r\n          ;out-dir-exists (v/my-macro out-dir-path)\r\n          ]\r\n      (println out-dir-path)\r\n      ;(println (str \"infix: \" foooo))\r\n      ;(println (str \"infix: \" (v/infix (onee + onee))))\r\n      ;(println (macroexpand '(v/my-macro \"aaout-dir-path\")))\r\n      {:db (assoc db :log-text\r\n                 out-dir-exists)}\r\n\r\n      ;(if data-valid\r\n      ;  {:db (assoc db :loading true\r\n      ;                 :log-text \"Please wait...\")\r\n      ;   :fx [[:dispatch [::http-post]]]}\r\n      ;  {:db (assoc db :log-text\r\n      ;                 \"Cannot create project: some data is invalid!\r\n      ;                 Check red fields above.\")})\r\n      )))\r\n\r\n    ;(let [data-valid (v/whole-map-valid? (:data db))]\r\n    ;  (if data-valid\r\n    ;    {:db (assoc db :loading true\r\n    ;                   :log-text \"Please wait...\")\r\n    ;     :fx (if data-valid [[:dispatch [::http-post]]] nil)}\r\n    ;    {:db (assoc db :log-text\r\n    ;                   \"Cannot create project: some data is invalid!\r\n    ;                   Check red fields above.\")}))))\r\n\r\n(re-frame/reg-event-db\r\n  ::set-loading\r\n  (fn [db [_ loading?]]\r\n    (assoc db :loading? loading?)))\r\n\r\n(re-frame/reg-event-fx\r\n  ::out-path-text-change\r\n  (input-update-handler v/valid-dir? [:data :out-path]))\r\n\r\n\r\n;(re-frame/reg-event-fx\r\n;  ::save-file\r\n;  (fn [{db :db} [_ path file]]\r\n;    (println (str path \" \" file))\r\n;    (v/save-file path file)\r\n;    {\r\n;     ;:fx (v/save-file path file)\r\n;     ;:dispatch-n [:show-loader]\r\n;     ;:fx (let [blob (generate-blob data content-type)]\r\n;     ;      (download-file filename blob))\r\n;     ;:dispatch-n [:hide-loader]\r\n;     }))\r\n\r\n\r\n;-----------------------------------------------DB EVENTS-----------------------------------------------\r\n\r\n; \u041e\u0442\u043c\u0435\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0431\u0434 (new-value = \u0442\u0438\u043f)\r\n(re-frame/reg-event-fx\r\n  ::change-db-checked\r\n  (radio-check-handler [:data :db :type]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-db-name-change\r\n  (input-update-handler v/valid-host? [:data :db :postgres :db-name])) ;todo\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-host-change\r\n  (input-update-handler v/valid-host? [:data :db :postgres :host]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-username-change\r\n  (input-update-handler v/valid-host? [:data :db :postgres :username]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-password-change\r\n  (input-update-handler v/valid-host? [:data :db :postgres :password]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-table-name-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :db :postgres :tables :content box :name]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-column-name-change\r\n  (fn [{db :db} [_ new-value box row]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :db :postgres :tables :content box :columns row :name]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::postgres-column-opts-change\r\n  (fn [{db :db} [_ new-value box row]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :db :postgres :tables :content box :columns row :opts]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0411\u0414 (new item = table-num)\r\n(re-frame/reg-event-fx\r\n  ::add-table-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :db :postgres :tables :table-vec] conj new-item)\r\n                         (assoc-in [:data :db :postgres :tables :content new-item]\r\n                                   {:name    {:value \"\"\r\n                                              :valid true}\r\n                                    :columns nil\r\n                                    }))]\r\n      (println (str \"added. new: \\n\" (get-in updated-db [:data :db :postgres :tables :table-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :column-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :content])))\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0411\u0414 (new item = [table-num col-num])\r\n(re-frame/reg-event-fx\r\n  ::add-table-column-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :db :postgres :tables :column-vec] conj new-item)\r\n                         (assoc-in [:data :db :postgres :tables :content (first new-item) :columns (second new-item)]\r\n                                   {:name {:value \"\"\r\n                                           :valid true}\r\n                                    :opts {:value \"\"\r\n                                           :valid true}}))]\r\n      (println (str \"added. new: \\n\" (get-in updated-db [:data :db :postgres :tables :table-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :column-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :content])))\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(defn remove-elem [coll pred]\r\n  (vec (remove pred coll)))\r\n\r\n; \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0411\u0414\r\n(re-frame/reg-event-fx\r\n  ::minus-table-item\r\n  (fn [{db :db} [_ id]]\r\n    (println (str \"old: \\n\" (get-in db [:data :db :postgres :tables :table-vec])\r\n                  \"\\n\" (get-in db [:data :db :postgres :tables :column-vec])\r\n                  \"\\n\" (get-in db [:data :db :postgres :tables :content])))\r\n\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :db :postgres :tables :table-vec] remove-elem #(= % id))\r\n                         (update-in [:data :db :postgres :tables :column-vec] remove-elem #(= (first %) id))\r\n                         (update-in [:data :db :postgres :tables :content] dissoc id))]\r\n\r\n      (println (str \"removed. new: \\n\" (get-in updated-db [:data :db :postgres :tables :table-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :column-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :content])))\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0411\u0414\r\n(re-frame/reg-event-fx\r\n  ::minus-table-column-item\r\n  (fn [{db :db} [_ t-id col-id]]\r\n    (println (str \"old: \\n\" (get-in db [:data :db :postgres :tables :table-vec])\r\n                  \"\\n\" (get-in db [:data :db :postgres :tables :column-vec])\r\n                  \"\\n\" (get-in db [:data :db :postgres :tables :content])))\r\n\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :db :postgres :tables :column-vec]\r\n                                    remove-elem #(and\r\n                                                   (= (first %) t-id)\r\n                                                   (= (second %) col-id)))\r\n                         (update-in [:data :db :postgres :tables :content t-id :columns] dissoc col-id))]\r\n\r\n      (println (str \"removed. new: \\n\" (get-in updated-db [:data :db :postgres :tables :table-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :column-vec])\r\n                    \"\\n\" (get-in updated-db [:data :db :postgres :tables :content])))\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n\r\n;-----------------------------------------------SERVER EVENTS-----------------------------------------------\r\n\r\n; \u041e\u0442\u043c\u0435\u0447\u0430\u0435\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0442\u0438\u043f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (new-value = \u0442\u0438\u043f)\r\n(re-frame/reg-event-fx\r\n  ::change-server-checked\r\n  (radio-check-handler [:data :server :type]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::change-spring-opt-radio\r\n  (radio-check-handler [:data :server :spring :project] true))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-group-change\r\n  (input-update-handler v/valid-host? [:data :server :spring :project :group]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-artifact-change\r\n  (input-update-handler v/valid-host? [:data :server :spring :project :artifact]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-proj-name-change\r\n  (input-update-handler v/valid-host? [:data :server :spring :project :proj-name]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-description-change\r\n  (input-update-handler v/valid-host? [:data :server :spring :project :description]))\r\n\r\n; \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0437\u0430\u043f\u0438\u0445\u043d\u0443\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u043f\u0441\u044b \u0432 \u043e\u0434\u0438\u043d \u0438\u0432\u0435\u043d\u0442\r\n(re-frame/reg-event-fx\r\n  ::spring-db-props-change\r\n  (fn [{db :db} [_ prop-keyword new-value]]\r\n    (let [is-valid (some? (case prop-keyword\r\n                            :type (v/valid-host? new-value) ;todo\r\n                            :username (v/valid-host? new-value) ;todo\r\n                            :password (v/valid-host? new-value) ;todo\r\n                            :sql-host (v/valid-host? new-value)\r\n                            :sql-port (v/valid-host? new-value) ;todo\r\n                            :db-name (v/valid-host? new-value))) ;todo\r\n          place [:data :server :spring :properties :db prop-keyword]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-controller-name-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :server :spring :controllers :content box :name]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-method-name-change\r\n  (fn [{db :db} [_ new-value box row]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :server :spring :controllers :content box :methods row :name]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-method-url-change\r\n  (fn [{db :db} [_ new-value box row]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :server :spring :controllers :content box :methods row :url]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::spring-method-type-change\r\n  (fn [{db :db} [_ new-value box row]]\r\n    (let [is-valid (some? (v/valid-host? new-value))        ;todo\r\n          place [:data :server :spring :controllers :content box :methods row :type]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (new item = controller-num)\r\n(re-frame/reg-event-fx\r\n  ::add-controller-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :server :spring :controllers :controller-vec] conj new-item)\r\n                         (assoc-in [:data :server :spring :controllers :content new-item]\r\n                                   {:name    {:value \"\"\r\n                                              :valid true}\r\n                                    :methods nil\r\n                                    }))]\r\n      {:db             updated-db\r\n       :update-storage updated-db}\r\n      )))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 \u0432 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u043b\u0435\u0440 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (new item = [controller-num req-num])\r\n(re-frame/reg-event-fx\r\n  ::add-controller-method-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :server :spring :controllers :method-vec] conj new-item)\r\n                         (assoc-in [:data :server :spring :controllers :content (first new-item) :methods (second new-item)]\r\n                                   {:name {:value \"\"\r\n                                           :valid true}\r\n                                    :url  {:value \"\"\r\n                                           :valid true}\r\n                                    :type {:value \"\"\r\n                                           :valid true}}))]\r\n      {:db             updated-db\r\n       :update-storage updated-db}\r\n      )))\r\n\r\n\r\n;-----------------------------------------------CLIENT EVENTS-----------------------------------------------\r\n\r\n(re-frame/reg-event-fx\r\n  ::change-client-checked\r\n  (radio-check-handler [:data :client :type]))\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-radio-opts-change\r\n  (radio-check-handler [:data :client :android] true))\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-props-change\r\n  (fn [{db :db} [_ prop-keyword new-value]]\r\n    (let [is-valid (some? (case prop-keyword\r\n                            :proj-name (v/valid-host? new-value) ;todo\r\n                            :package-name (v/valid-host? new-value) ;todo\r\n                            :server-host (v/valid-host? new-value)\r\n                            :server-port (v/valid-host? new-value))) ;todo\r\n          place [:data :client :android prop-keyword]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-endpoint-url-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-url? new-value))         ;todo\r\n          place [:data :client :android :endpoints :content box :url]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-endpoint-method-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-java-name? new-value))   ;todo\r\n          place [:data :client :android :endpoints :content box :name]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-endpoint-request-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-req-type? new-value))    ;todo\r\n          place [:data :client :android :endpoints :content box :request]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::android-endpoint-body-change\r\n  (fn [{db :db} [_ new-value box]]\r\n    (let [is-valid (some? (v/valid-java-name? new-value))   ;todo\r\n          place [:data :client :android :endpoints :content box :body]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0443\u0441\u0442\u043e\u0439 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (new item = endpoint-num, \u0432 \u0432\u0435\u043a\u0442\u043e\u0440 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u043e\u0432\u0430\u044f \u0447\u0438\u0441\u0435\u043b\u043a\u0430)\r\n(re-frame/reg-event-fx\r\n  ::add-client-endpoint-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :client :android :endpoints :endpoints-vec] conj new-item)\r\n                         (assoc-in [:data :client :android :endpoints :content new-item]\r\n                                   {:url     {:value \"\"\r\n                                              :valid true}\r\n                                    :name    {:value \"\"\r\n                                              :valid true}\r\n                                    :request {:value \"\"\r\n                                              :valid true}\r\n                                    :body    {:value \"\"\r\n                                              :valid true}}))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n;-----------------------------------------------DEPLOY EVENTS-----------------------------------------------\r\n\r\n(re-frame/reg-event-fx\r\n  ::change-deploy-checked\r\n  (radio-check-handler [:data :containerization :type]))\r\n\r\n; type-keyword = :jars/:nginx/:postgres\r\n(re-frame/reg-event-fx\r\n  ::docker-container-opts-change\r\n  (fn [{db :db} [_ new-value box type-keyword prop-keyword]]\r\n    (let [is-valid (some? (case prop-keyword\r\n                            :image-name (v/valid-host? new-value) ;todo\r\n                            :container-name (v/valid-host? new-value) ;todo\r\n                            :dir-name (v/valid-host? new-value) ;todo\r\n                            :backend-container-name (v/valid-host? new-value) ;todo\r\n                            :jar-path (v/valid-host? new-value) ;todo\r\n                            :port (v/valid-host? new-value) ;todo\r\n                            :password (v/valid-host? new-value))) ;todo\r\n          place [:data :containerization :docker type-keyword :content box prop-keyword]\r\n          updated-db (-> db\r\n                         (assoc-in (conj place :value) new-value)\r\n                         (assoc-in (conj place :valid) is-valid))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n(re-frame/reg-event-fx\r\n  ::docker-network-change\r\n  (input-update-handler v/valid-host? [:data :containerization :docker :network]))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0436\u0430\u0440-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 (new item = jar-cont-num)\r\n(re-frame/reg-event-fx\r\n  ::add-jar-cont-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :containerization :docker :jars :cont-vec] conj new-item)\r\n                         (assoc-in [:data :containerization :docker :jars :content new-item]\r\n                                   {:image-name     {:value \"\"\r\n                                                     :valid true}\r\n                                    :container-name {:value \"\"\r\n                                                     :valid true}\r\n                                    :dir-name       {:value \"\"\r\n                                                     :valid true}\r\n                                    :jar-path       {:value \"\"\r\n                                                     :valid true}}))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 nginx-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 (new item = nginx-cont-num)\r\n(re-frame/reg-event-fx\r\n  ::add-nginx-cont-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :containerization :docker :nginx :cont-vec] conj new-item)\r\n                         (assoc-in [:data :containerization :docker :nginx :content new-item]\r\n                                   {:image-name             {:value \"\"\r\n                                                             :valid true}\r\n                                    :container-name         {:value \"\"\r\n                                                             :valid true}\r\n                                    :dir-name               {:value \"\"\r\n                                                             :valid true}\r\n                                    :backend-container-name {:value \"\"\r\n                                                             :valid true}}))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n; \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 postgres-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 (new item = postgres-cont-num)\r\n(re-frame/reg-event-fx\r\n  ::add-postgres-cont-item\r\n  (fn [{db :db} [_ new-item]]\r\n    (let [updated-db (-> db\r\n                         (update-in [:data :containerization :docker :postgres :cont-vec] conj new-item)\r\n                         (assoc-in [:data :containerization :docker :postgres :content new-item]\r\n                                   {:container-name {:value \"\"\r\n                                                     :valid true}\r\n                                    :port           {:value \"\"\r\n                                                     :valid true}\r\n                                    :password       {:value \"\"\r\n                                                     :valid true}}))]\r\n      {:db             updated-db\r\n       :update-storage updated-db})))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}