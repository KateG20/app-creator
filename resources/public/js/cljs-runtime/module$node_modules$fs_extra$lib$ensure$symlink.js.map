{
"version":3,
"file":"module$node_modules$fs_extra$lib$ensure$symlink.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/fs-extra/lib/ensure/symlink.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fs_extra$lib$ensure$symlink\"] = function(global,require,module,exports) {\n'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('../fs')\nconst _mkdirs = require('../mkdirs')\nconst mkdirs = _mkdirs.mkdirs\nconst mkdirsSync = _mkdirs.mkdirsSync\n\nconst _symlinkPaths = require('./symlink-paths')\nconst symlinkPaths = _symlinkPaths.symlinkPaths\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nconst _symlinkType = require('./symlink-type')\nconst symlinkType = _symlinkType.symlinkType\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nconst pathExists = require('../path-exists').pathExists\n\nconst { areIdentical } = require('../util/stat')\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([\n        fs.stat(srcpath),\n        fs.stat(dstpath)\n      ]).then(([srcStat, dstStat]) => {\n        if (areIdentical(srcStat, dstStat)) return callback(null)\n        _createSymlink(srcpath, dstpath, type, callback)\n      })\n    } else _createSymlink(srcpath, dstpath, type, callback)\n  })\n}\n\nfunction _createSymlink (srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err)\n    srcpath = relative.toDst\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err)\n      const dir = path.dirname(dstpath)\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err)\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n        mkdirs(dir, err => {\n          if (err) return callback(err)\n          fs.symlink(srcpath, dstpath, type, callback)\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_createSymlink","srcpath","dstpath","type","callback","symlinkPaths","err","relative","toDst","symlinkType","toCwd","dir","path","dirname","pathExists","dirExists","fs","symlink","mkdirs","u","fromCallback","_mkdirs","mkdirsSync","_symlinkPaths","symlinkPathsSync","_symlinkType","symlinkTypeSync","areIdentical","createSymlink","lstat","stats","isSymbolicLink","Promise","all","stat","then","srcStat","dstStat","createSymlinkSync","lstatSync","statSync","existsSync","exists","symlinkSync"]
}
