shadow$provide.module$node_modules$fs_extra$lib$copy$copy=function(global,require,module,exports){function checkParentDir(destStat,src,dest,opts,cb){const destParent=path.dirname(dest);pathExists(destParent,(err$jscomp$0,dirExists)=>{if(err$jscomp$0)return cb(err$jscomp$0);if(dirExists)return getStats(destStat,src,dest,opts,cb);mkdirs(destParent,err=>err?cb(err):getStats(destStat,src,dest,opts,cb))})}function runFilter(src,dest,opts,cb){if(!opts.filter)return cb(null,!0);Promise.resolve(opts.filter(src,
dest)).then(include=>cb(null,include),error=>cb(error))}function getStats(destStat,src,dest,opts,cb){(opts.dereference?fs.stat:fs.lstat)(src,(err,srcStat)=>err?cb(err):srcStat.isDirectory()?(err=destStat?copyDir(src,dest,opts,cb):mkDirAndCopy(srcStat.mode,src,dest,opts,cb),err):srcStat.isFile()||srcStat.isCharacterDevice()||srcStat.isBlockDevice()?(err=destStat?mayCopyFile(srcStat,src,dest,opts,cb):copyFile(srcStat,src,dest,opts,cb),err):srcStat.isSymbolicLink()?onLink(destStat,src,dest,opts,cb):
srcStat.isSocket()?cb(Error(`Cannot copy a socket file: ${src}`)):srcStat.isFIFO()?cb(Error(`Cannot copy a FIFO pipe: ${src}`)):cb(Error(`Unknown file: ${src}`)))}function mayCopyFile(srcStat,src,dest,opts,cb){if(opts.overwrite)fs.unlink(dest,err=>err?cb(err):copyFile(srcStat,src,dest,opts,cb));else return opts.errorOnExist?cb(Error(`'${dest}' already exists`)):cb()}function copyFile(srcStat,src,dest,opts,cb){fs.copyFile(src,dest,err=>err?cb(err):opts.preserveTimestamps?handleTimestampsAndMode(srcStat.mode,
src,dest,cb):fs.chmod(dest,srcStat.mode,cb))}function handleTimestampsAndMode(srcMode,src,dest,cb){return 0===(srcMode&128)?makeFileWritable(dest,srcMode,err=>err?cb(err):setDestTimestampsAndMode(srcMode,src,dest,cb)):setDestTimestampsAndMode(srcMode,src,dest,cb)}function makeFileWritable(dest,srcMode,cb){return fs.chmod(dest,srcMode|128,cb)}function setDestTimestampsAndMode(srcMode,src,dest,cb){setDestTimestamps(src,dest,err=>err?cb(err):fs.chmod(dest,srcMode,cb))}function setDestTimestamps(src,
dest,cb){fs.stat(src,(err,updatedSrcStat)=>err?cb(err):utimesMillis(dest,updatedSrcStat.atime,updatedSrcStat.mtime,cb))}function mkDirAndCopy(srcMode,src,dest,opts,cb){fs.mkdir(dest,err$jscomp$0=>{if(err$jscomp$0)return cb(err$jscomp$0);copyDir(src,dest,opts,err=>err?cb(err):fs.chmod(dest,srcMode,cb))})}function copyDir(src,dest,opts,cb){fs.readdir(src,(err,items)=>err?cb(err):copyDirItems(items,src,dest,opts,cb))}function copyDirItems(items,src,dest,opts,cb){const item=items.pop();return item?copyDirItem(items,
item,src,dest,opts,cb):cb()}function copyDirItem(items,item,src,dest,opts,cb){const srcItem=path.join(src,item),destItem=path.join(dest,item);runFilter(srcItem,destItem,opts,(err$jscomp$1,include)=>{if(err$jscomp$1)return cb(err$jscomp$1);if(!include)return copyDirItems(items,src,dest,opts,cb);stat.checkPaths(srcItem,destItem,"copy",opts,(err$jscomp$0,stats)=>{if(err$jscomp$0)return cb(err$jscomp$0);({destStat:err$jscomp$0}=stats);getStats(err$jscomp$0,srcItem,destItem,opts,err=>err?cb(err):copyDirItems(items,
src,dest,opts,cb))})})}function onLink(destStat,src,dest,opts,cb){fs.readlink(src,(err$jscomp$0,resolvedSrc)=>{if(err$jscomp$0)return cb(err$jscomp$0);opts.dereference&&(resolvedSrc=path.resolve(process.cwd(),resolvedSrc));if(destStat)fs.readlink(dest,(err,resolvedDest)=>{if(err)return"EINVAL"===err.code||"UNKNOWN"===err.code?fs.symlink(resolvedSrc,dest,cb):cb(err);opts.dereference&&(resolvedDest=path.resolve(process.cwd(),resolvedDest));return stat.isSrcSubdir(resolvedSrc,resolvedDest)?cb(Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)):
stat.isSrcSubdir(resolvedDest,resolvedSrc)?cb(Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)):copyLink(resolvedSrc,dest,cb)});else return fs.symlink(resolvedSrc,dest,cb)})}function copyLink(resolvedSrc,dest,cb){fs.unlink(dest,err=>err?cb(err):fs.symlink(resolvedSrc,dest,cb))}var process=require("module$node_modules$process$browser");"use strict";const fs=require("module$node_modules$graceful_fs$graceful_fs"),path=require("module$node_modules$path_browserify$index"),mkdirs=require("module$node_modules$fs_extra$lib$mkdirs$index").mkdirs,
pathExists=require("module$node_modules$fs_extra$lib$path_exists$index").pathExists,utimesMillis=require("module$node_modules$fs_extra$lib$util$utimes").utimesMillis,stat=require("module$node_modules$fs_extra$lib$util$stat");module.exports=function(src,dest,opts,cb){"function"!==typeof opts||cb?"function"===typeof opts&&(opts={filter:opts}):(cb=opts,opts={});cb=cb||function(){};opts=opts||{};opts.clobber="clobber"in opts?!!opts.clobber:!0;opts.overwrite="overwrite"in opts?!!opts.overwrite:opts.clobber;
opts.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0001");stat.checkPaths(src,dest,"copy",opts,(err$jscomp$1,stats)=>{if(err$jscomp$1)return cb(err$jscomp$1);const {srcStat,destStat}=stats;stat.checkParentPaths(src,srcStat,dest,"copy",err$jscomp$0=>{if(err$jscomp$0)return cb(err$jscomp$0);runFilter(src,dest,opts,(err,include)=>
{if(err)return cb(err);if(!include)return cb();checkParentDir(destStat,src,dest,opts,cb)})})})}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$copy$copy.js.map
