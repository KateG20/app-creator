shadow$provide.module$node_modules$fs_extra$lib$copy$copy_sync=function(global,require,module,exports){function getStats(destStat,src,dest,opts){const srcStat=(opts.dereference?fs.statSync:fs.lstatSync)(src);if(srcStat.isDirectory())return destStat?dest=copyDir(src,dest,opts):(destStat=srcStat.mode,fs.mkdirSync(dest),copyDir(src,dest,opts),dest=fs.chmodSync(dest,destStat)),dest;if(srcStat.isFile()||srcStat.isCharacterDevice()||srcStat.isBlockDevice()){if(destStat)if(opts.overwrite)fs.unlinkSync(dest),
dest=copyFile(srcStat,src,dest,opts);else{if(opts.errorOnExist)throw Error(`'${dest}' already exists`);dest=void 0}else dest=copyFile(srcStat,src,dest,opts);return dest}if(srcStat.isSymbolicLink()){a:if(src=fs.readlinkSync(src),opts.dereference&&(src=path.resolve(process.cwd(),src)),destStat){let resolvedDest;try{resolvedDest=fs.readlinkSync(dest)}catch(err){if("EINVAL"===err.code||"UNKNOWN"===err.code){dest=fs.symlinkSync(src,dest);break a}throw err;}opts.dereference&&(resolvedDest=path.resolve(process.cwd(),
resolvedDest));if(stat.isSrcSubdir(src,resolvedDest))throw Error(`Cannot copy '${src}' to a subdirectory of itself, '${resolvedDest}'.`);if(stat.isSrcSubdir(resolvedDest,src))throw Error(`Cannot overwrite '${resolvedDest}' with '${src}'.`);opts=src;fs.unlinkSync(dest);dest=fs.symlinkSync(opts,dest)}else dest=fs.symlinkSync(src,dest);return dest}if(srcStat.isSocket())throw Error(`Cannot copy a socket file: ${src}`);if(srcStat.isFIFO())throw Error(`Cannot copy a FIFO pipe: ${src}`);throw Error(`Unknown file: ${src}`);
}function copyFile(srcStat,src,dest,opts){fs.copyFileSync(src,dest);opts.preserveTimestamps&&(opts=srcStat.mode,0===(opts&128)&&fs.chmodSync(dest,opts|128),src=fs.statSync(src),utimesMillisSync(dest,src.atime,src.mtime));return fs.chmodSync(dest,srcStat.mode)}function copyDir(src,dest,opts){fs.readdirSync(src).forEach(item=>{{var JSCompiler_inline_result=path.join(src,item);const destItem=path.join(dest,item);opts.filter&&!opts.filter(JSCompiler_inline_result,destItem)?JSCompiler_inline_result=void 0:
({destStat:item}=stat.checkPathsSync(JSCompiler_inline_result,destItem,"copy",opts),JSCompiler_inline_result=getStats(item,JSCompiler_inline_result,destItem,opts))}return JSCompiler_inline_result})}var process=require("module$node_modules$process$browser");"use strict";const fs=require("module$node_modules$graceful_fs$graceful_fs"),path=require("module$node_modules$path_browserify$index"),mkdirsSync=require("module$node_modules$fs_extra$lib$mkdirs$index").mkdirsSync,utimesMillisSync=require("module$node_modules$fs_extra$lib$util$utimes").utimesMillisSync,
stat=require("module$node_modules$fs_extra$lib$util$stat");module.exports=function(src,dest,opts){"function"===typeof opts&&(opts={filter:opts});opts=opts||{};opts.clobber="clobber"in opts?!!opts.clobber:!0;opts.overwrite="overwrite"in opts?!!opts.overwrite:opts.clobber;opts.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");
const {srcStat,destStat}=stat.checkPathsSync(src,dest,"copy",opts);stat.checkParentPathsSync(src,srcStat,dest,"copy");if(!opts.filter||opts.filter(src,dest)){var destParent=path.dirname(dest);fs.existsSync(destParent)||mkdirsSync(destParent);return getStats(destStat,src,dest,opts)}}}
//# sourceMappingURL=module$node_modules$fs_extra$lib$copy$copy_sync.js.map
