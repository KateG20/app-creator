{"version":3,"sources":["app_creator/client/ui/validator.cljc"],"mappings":";;AAoBA,2CAAA,3CAAKA;AAEL,AAAKC,4CAAU,qBAAA,rBAACC;AAChB,kDAAA,lDAAKC;AACL,iDAAA,jDAAKC;AAEL,+CAAA,mFAAA,MAAA,OAAA,OAAA,MAAA,QAAA,SAAA,7KAAKC;AAeL,AAIA,0DAAA,1DAAMC,4HAAmBC;AAAzB,AACE,AAAA,AAIE,gHAAA,zGAACC;;AAkDL,6CAAA,7CAAMC,kGAAYC;AAAlB,AACE,OAACC,oBAAUD;;AAEb,mDAAA,nDAAME,8GAAkBC,IAAIC;AAA5B,AACE,IAAMD,UAAI,AAACJ,2CAAWI;AAAtB,AACE,IAAAE,mBAAI,AAACC,uBAAOH;AAAZ,AAAA,GAAAE;AAAAA;;AACI,OAACE,qBAAWH,MAAMD;;;AAE1B,oDAAA,pDAAMK,gHAAaC;AAAnB,AACE,IAAAJ,mBAAI,6CAAA,7CAACK,yDAAcD;AAAnB,AAAA,GAAAJ;AAAAA;;AACI,OAACH,iDAAiBO,KAAKnB;;;AAE7B,mDAAA,nDAAMqB,8GAAYC;AAAlB,AACE,OAACV,iDAAiBU,IAAIrB;;AAExB,yDAAA,zDAAMsB,0HAAkBC;AAAxB,AACE,OAACZ,iDAAiBY,KAAKrB;;AAEzB,mDAAA,nDAAMsB,8GAAYlB;AAAlB,AACE,OAACK,iDAAiBL,KAAKH;;AAEzB,wDAAA,xDAAMsB,wHAAiBC;AAAvB,AACE,sBAAA,WAAAC,1BAACC;AAAD,AAAO,oIAAAD,7HAACR,6CAAE,AAACU,0BAAgB,AAACrB,2CAAWkB;GAAc,0FAAA,1FAACI,6CAAK1B;;AAE7D,iDAAA,jDAAM2B,0GAAgBC;AAAtB,AACE,OAACC,oBAAU,WAAKC,KAAKC,EAAEC;AAAZ,AACE,GAAI,+CAAA,/CAACjB,6CAAEgB;AACL,OAACL,6CAAKI,KAAKE;;AACX,GAAI,AAACC,qBAAKD;AACR,oDAAA,7CAACE,8EAAQ,AAACC,+CAAOL,KAAK,CAACH,+EAAAA,kFAAAA,LAAeK,8DAAAA;;AACtCF;;;GALjB,iCAOWF;;AAEb,yDAAA,zDAAMQ,0HAAkBC;AAAxB,AACE,qGAAA,7FAAM,AAACb,eAAKc,uBAAO,AAACX,+CAAeU","names":["app-creator.client.ui.validator/ip-regex","app-creator.client.ui.validator/url-regex","cljs.core/re-pattern","app-creator.client.ui.validator/java-name-regex","app-creator.client.ui.validator/out-path-regex","app-creator.client.ui.validator/http-methods","app-creator.client.ui.validator/directory-exists?","path","cljs.core.println","app-creator.client.ui.validator/trim-input","s","clojure.string/trim","app-creator.client.ui.validator/empty-or-matches","val","regex","or__5045__auto__","cljs.core/empty?","cljs.core/re-matches","app-creator.client.ui.validator/valid-host?","host","cljs.core._EQ_","app-creator.client.ui.validator/valid-url?","url","app-creator.client.ui.validator/valid-java-name?","name","app-creator.client.ui.validator/valid-dir?","app-creator.client.ui.validator/valid-req-type?","req-type","p1__55936#","cljs.core/some","clojure.string/lower-case","cljs.core.conj","app-creator.client.ui.validator/find-all-valid","m","cljs.core/reduce-kv","prev","k","v","cljs.core/map?","cljs.core.into","cljs.core.concat","app-creator.client.ui.validator/whole-map-valid?","db","cljs.core/false?"],"sourcesContent":["(ns app-creator.client.ui.validator\r\n  (:require [clojure.string :as cstr]\r\n            #?(:clj  [clojure.java.io :as io]\r\n               :cljs [cljs.nodejs :as nodejs])\r\n            [cljs.nodejs :as nodejs]\r\n    [\"fs-extra\" :as fs-extra]\r\n            ;#?(:cljs [fs :as fs])\r\n\r\n    ;[app-creator.server.macros :as m :include-macros true]\r\n    ;[app-creator.client.ui.mcr :as m]\r\n            )\r\n  #?(:cljs (:require-macros [app-creator.client.ui.validator :refer [my-macro infix]]))\r\n\r\n  ;#?(:cljs(:require-macros [app-creator.client.ui.mcr :refer [my-precomputed-macro-cljs]]))\r\n  ;(:require-macros [app-creator.server.macros :as m])\r\n  )\r\n\r\n;(defn my-function [arg]\r\n;  (my-precomputed-macro-cljs (str \"(:foo \" arg \")\")))\r\n\r\n(def ip-regex #\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\")\r\n; using re-pattern requires double-escape\r\n(def url-regex (re-pattern \"^\\\\/([!#$&\\\\-;=?-\\\\[\\\\]_a-z~]|%[0-9a-fA-F]{2}|\\\\/?)+$\"))\r\n(def java-name-regex #\"^[a-zA-Z0-9_]+$\")\r\n(def out-path-regex #\"^([^\\.])+$\")\r\n\r\n(def http-methods [\"get\" \"head\" \"post\" \"put\" \"patch\" \"delete\" \"options\"])\r\n;(defn save-file [path file]\r\n;  #?(:clj\r\n;     (do\r\n;       (println \"clojure code\")\r\n;       (let [content (slurp file)]\r\n;         (spit path content)))\r\n;     :cljs (println \"i can't save file!\")))\r\n\r\n;(defmacro foo\r\n;  [path]\r\n;  `(str \"clJS - exists? \" (and\r\n;                           (.isDirectory (io/file path))\r\n;                           (some? (re-matches out-path-regex path))) ~path))\r\n\r\n(set! *warn-on-infer* true)\r\n;(nodejs/enable-util-print!)\r\n;(def fs (nodejs/require \"fs\"))\r\n\r\n(defn directory-exists? [path]\r\n  (let [\r\n        ;fs (nodejs/require \"fs\")\r\n        ;js-path ^js/__dirname path\r\n        ]\r\n    (println \"i'm in func!\")\r\n    ;(str \"clJS - exists? \"(.existsSync fs path))\r\n    ))\r\n  ;#?(:clj\r\n  ;   (str \"clj - exists? \" (and\r\n  ;                           (.isDirectory (io/file path))\r\n  ;                           (some? (re-matches out-path-regex path))))\r\n  ;   :cljs (let [fs (nodejs/require \"fs\")\r\n  ;               js-path ^js/__dirname path]\r\n  ;           (str \"clJS - exists? \"(.existsSync fs js-path)))\r\n  ;   ;(let [\r\n  ;   ;            ;filesystem (fs/getTemporary)\r\n  ;   ;            fso (js/ActiveXObject. \"Scripting.FileSystemObject\")\r\n  ;   ;            ; fso.FolderExists(sFolderPath)\r\n  ;   ;            ]\r\n  ;   ;        (str \"clJS - exists? \" (.FolderExists fso path)))\r\n  ;   ))\r\n#?(:clj (defmacro my-macro\r\n          [global-path]\r\n          ;(path)\r\n          ;`(str \"clJS - exists? \" ~(.isDirectory ~(clojure.java.io/file ~path))\r\n          ;      ;(and\r\n          ;      ;                    (~.isDirectory (~clojure.java.io/file ~path))\r\n          ;      ;                    1\r\n          ;      ;                    (some? (re-matches out-path-regex (str ~path)))) ~path\r\n          ;      )\r\n\r\n          ;(list 'str \"clJS - exists? \" (.isDirectory (clojure.java.io/file (str path))))\r\n\r\n          (list 'str \"clJS - exists? \"\r\n                ;(.isDirectory (clojure.java.io/file 'out-dir-path))\r\n                \" | PATH: \" global-path\r\n                \" | \" (str global-path)\r\n                \" | \" (= global-path \"C:\\\\Users\\\\Lenovo X1\\\\Downloads\\\\ttttt\")\r\n                \" | \" (ns-resolve (find-ns 'app-creator.client.events) global-path))\r\n\r\n          ;`()\r\n\r\n          ;(list (second path) (first path) (last path))\r\n          ;(let [isdir \"a\"\r\n          ;(.isDirectory (clojure.java.io/file `(~path)))\r\n          ;]\r\n          ;`(str \"clJS - exists? \" (str ~path) \" path: \" (str `(~path)) \" \" ~isdir))\r\n          ))\r\n\r\n#?(:clj (defmacro infix\r\n          \"Use this macro when you pine for the notation of your childhood\"\r\n          [infixed]\r\n          (list (second infixed) (first infixed) (last infixed))))\r\n\r\n(defn trim-input [s]\r\n  (cstr/trim s))\r\n\r\n(defn empty-or-matches [val regex]\r\n  (let [val (trim-input val)]\r\n    (or (empty? val)\r\n        (re-matches regex val))))\r\n\r\n(defn valid-host? [host]\r\n  (or (= \"localhost\" host)\r\n      (empty-or-matches host ip-regex)))\r\n\r\n(defn valid-url? [url]\r\n  (empty-or-matches url url-regex))\r\n\r\n(defn valid-java-name? [name]\r\n  (empty-or-matches name java-name-regex))\r\n\r\n(defn valid-dir? [path]                                     ; todo \u0442\u0443\u0442 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c reader conditionals\r\n  (empty-or-matches path out-path-regex))\r\n\r\n(defn valid-req-type? [req-type]\r\n  (some #(= (cstr/lower-case (trim-input req-type)) %) (conj http-methods \"\")))\r\n\r\n(defn find-all-valid [m]\r\n  (reduce-kv (fn [prev k v]\r\n               (if (= k :valid)\r\n                 (conj prev v)\r\n                 (if (map? v)\r\n                   (into [] (concat prev (find-all-valid v)))\r\n                   prev)))\r\n             []\r\n             m))\r\n\r\n(defn whole-map-valid? [db]\r\n  (nil? (some false? (find-all-valid db))))\r\n"]}