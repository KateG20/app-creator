["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\r\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\r\n\r\nreturn context;\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\r\n} else {\r\nvar vec__36970_37030 = clojure.data.diff(orig_db,new_db);\r\nvar only_before_37031 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36970_37030,(0),null);\r\nvar only_after_37032 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36970_37030,(1),null);\r\nvar db_changed_QMARK__37033 = (((!((only_before_37031 == null)))) || ((!((only_after_37032 == null)))));\r\nif(db_changed_QMARK__37033){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_37031], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_37032], 0));\r\n\r\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\r\n}\r\n}\r\n\r\nreturn context;\r\n})], 0));\r\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\r\nvar vec__36977 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36977,(0),null);\r\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__36977,(1),null);\r\nvar event = vec__36977;\r\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \",event], 0));\r\n\r\nreturn context;\r\n} else {\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\r\n}\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\r\n})], 0));\r\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\r\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\r\n\r\nreturn context;\r\n} else {\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\r\n}\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\r\n})], 0));\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\r\n * \r\n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\r\n * \r\n *    (fn [db event]\r\n *       ....)\r\n * \r\n *   So, the interceptor wraps the given handler:\r\n *   1. extracts two `:coeffects` keys: db and event\r\n *   2. calls handler-fn\r\n *   3. stores the db result back into context's `:effects`\r\n */\r\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__36984 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__36985 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__36985);\r\n\r\ntry{try{var map__36988 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__36988__$1 = cljs.core.__destructure_map(map__36988);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36988__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36988__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__36741__auto___37034 = re_frame.interop.now();\r\nvar duration__36742__auto___37035 = (end__36741__auto___37034 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__36742__auto___37035,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__36741__auto___37034);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__36984);\r\n}})():(function (){var map__36989 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__36989__$1 = cljs.core.__destructure_map(map__36989);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36989__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36989__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null,db,event)));\r\n})());\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__36743__auto___37036 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__36743__auto___37036);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\r\n * \r\n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\r\n * \r\n *    (fn [coeffects event]\r\n *       {:db ...\r\n *        :fx ...})\r\n * \r\n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\r\n *   1. extracts `:coeffects`\r\n *   2. call handler-fn giving coeffects\r\n *   3. stores the result back into the `:effects`\r\n */\r\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__36995 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__36996 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__36996);\r\n\r\ntry{try{var map__36999 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__36999__$1 = cljs.core.__destructure_map(map__36999);\r\nvar coeffects = map__36999__$1;\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__36999__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__36741__auto___37037 = re_frame.interop.now();\r\nvar duration__36742__auto___37038 = (end__36741__auto___37037 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__36742__auto___37038,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__36741__auto___37037);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__36995);\r\n}})():(function (){var map__37001 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__37001__$1 = cljs.core.__destructure_map(map__37001);\r\nvar coeffects = map__37001__$1;\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__37001__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null,coeffects,event)));\r\n})());\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__36743__auto___37039 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__36743__auto___37039);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\r\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\r\n *   Example:\r\n * \r\n *    (fn [context]\r\n *       (enqueue context [more interceptors]))\r\n */\r\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__37006 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__37007 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__37007);\r\n\r\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__36741__auto___37043 = re_frame.interop.now();\r\nvar duration__36742__auto___37044 = (end__36741__auto___37043 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__36742__auto___37044,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__36741__auto___37043);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__37006);\r\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null,context)));\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__36743__auto___37045 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__36743__auto___37045);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___37050 = arguments.length;\r\nvar i__5770__auto___37051 = (0);\r\nwhile(true){\r\nif((i__5770__auto___37051 < len__5769__auto___37050)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___37051]));\r\n\r\nvar G__37052 = (i__5770__auto___37051 + (1));\r\ni__5770__auto___37051 = G__37052;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar path = cljs.core.flatten(args);\r\nvar db_store_key = new cljs.core.Keyword(\"re-frame-path\",\"db-store\",\"re-frame-path/db-store\",655758490);\r\nif(cljs.core.empty_QMARK_(path)){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\r\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,db_store_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\r\nvar db_store = db_store_key.cljs$core$IFn$_invoke$arity$1(context);\r\nvar original_db = cljs.core.peek(db_store);\r\nvar new_db_store = cljs.core.pop(db_store);\r\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,db_store_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\r\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nreturn context_SINGLEQUOTE_;\r\n} else {\r\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\r\n}\r\n})], 0));\r\n}));\r\n\r\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq37015){\r\nvar self__5755__auto__ = this;\r\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq37015));\r\n}));\r\n\r\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar prev_db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\r\nvar new_db = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(prev_db,event) : f.call(null,prev_db,event));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (){var or__5045__auto__ = new_db;\r\nif(cljs.core.truth_(or__5045__auto__)){\r\nreturn or__5045__auto__;\r\n} else {\r\nreturn prev_db;\r\n}\r\n})());\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\r\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null,db,event));\r\n\r\nreturn context;\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\r\nvar args__5775__auto__ = [];\r\nvar len__5769__auto___37053 = arguments.length;\r\nvar i__5770__auto___37054 = (0);\r\nwhile(true){\r\nif((i__5770__auto___37054 < len__5769__auto___37053)){\r\nargs__5775__auto__.push((arguments[i__5770__auto___37054]));\r\n\r\nvar G__37058 = (i__5770__auto___37054 + (1));\r\ni__5770__auto___37054 = G__37058;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\r\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\r\n});\r\n\r\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__37024_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__37024_SHARP_);\r\n}),in_paths);\r\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__37025_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__37025_SHARP_);\r\n}),in_paths);\r\nvar changed_ins_QMARK_ = (function (){var and__5043__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nif(and__5043__auto__){\r\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\r\n} else {\r\nreturn and__5043__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(changed_ins_QMARK_)){\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\r\n} else {\r\nreturn context;\r\n}\r\n})], 0));\r\n}));\r\n\r\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq37026){\r\nvar G__37027 = cljs.core.first(seq37026);\r\nvar seq37026__$1 = cljs.core.next(seq37026);\r\nvar G__37028 = cljs.core.first(seq37026__$1);\r\nvar seq37026__$2 = cljs.core.next(seq37026__$1);\r\nvar self__5754__auto__ = this;\r\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__37027,G__37028,seq37026__$2);\r\n}));\r\n\r\n/**\r\n * An interceptor which adds registered global interceptors to the context's queue.\r\n * \r\n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\r\n */\r\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__37029_SHARP_){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__37029_SHARP_);\r\n}));\r\n})], 0));\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^U","~$data","~$clojure.data","~$re-frame.trace","^X","~$re-frame.settings","^Y","~$cljs.core","^Z","~$interceptor","^U","~$goog","^10","~$trace","^X","~$re-frame.utils","^12","~$settings","^Y","~$re-frame.loggers","^14","~$utils","^12","^T","^T","^W","^W","~$re-frame.db","^16"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$->interceptor","^U","~$get-effect","^U","~$get-coeffect","^U","~$assoc-coeffect","^U","~$assoc-effect","^U","~$update-coeffect","^U","~$console","^14","~$app-db","^16"],"~:require-macros",["^ ","^X","^X","^11","^X","^Z","^Z"],"~:form",["~#list",["~$ns","^M","contains re-frame supplied, standard interceptors",["^1D",["^18",["^U","~:refer",["^1:","^1;","^1<","^1=","^1>","^1?"]],["^14","^1F",["^1@"]],["^Y","~:as","^13"],["^16","^1F",["^1A"]],["^W","^1G","^V"],["^T","^1G","^S"],["^12","^1G","^15"],["^X","^1G","^11","~:include-macros",true],["^U","^1G","^["]]]]],"~:flags",["^ ","^18",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]],"^P","^M","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1682530596785,"^N",["^ ","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^U","^10","^10","^11","^X","^12","^12","^13","^Y","^14","^14","^15","^12","^T","^T","^W","^W","^16","^16"],"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n    [re-frame.loggers :refer [console]]\n    [re-frame.settings :as settings]\n    [re-frame.db :refer [app-db]]\n    [clojure.data :as data]\n    [re-frame.cofx :as cofx]\n    [re-frame.utils :as utils]\n    [re-frame.trace :as trace :include-macros true]\n    [re-frame.interceptor :as interceptor]))\n\n\n(def debug\n  (->interceptor\n    :id     :debug\n    :before (fn debug-before\n              [context]\n              (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n              context)\n    :after  (fn debug-after\n              [context]\n              (let [event   (get-coeffect context :event)\n                    orig-db (get-coeffect context :db)\n                    new-db  (get-effect   context :db ::not-found)]\n                (if (= new-db ::not-found)\n                  (console :log \"No app-db changes in:\" event)\n                  (let [[only-before only-after] (data/diff orig-db new-db)\n                        db-changed?    (or (some? only-before) (some? only-after))]\n                    (if db-changed?\n                      (do (console :group \"db clojure.data/diff for:\" event)\n                          (console :log \"only before:\" only-before)\n                          (console :log \"only after :\" only-after)\n                          (console :groupEnd))\n                      (console :log \"No app-db changes resulted from:\" event))))\n                context))))\n\n\n(def unwrap\n  (->interceptor\n    :id      :unwrap\n    :before  (fn unwrap-before\n               [context]\n               (let [[_ payload :as event] (get-coeffect context :event)]\n                 (if-not (and (= 2 (count event))\n                              (map? payload))\n                   (do\n                     (console :warn \"re-frame: \\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                     context)\n                   (assoc-coeffect context :event payload))))\n    :after   (fn unwrap-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n(def trim-v\n  (->interceptor\n    :id      :trim-v\n    :before  (fn trim-v-before\n               [context]\n               (if-not (vector? (get-coeffect context :event))\n                 (do\n                   (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                   context)\n                 (update-coeffect context :event subvec 1)))\n    :after   (fn trim-v-after\n               [context]\n               (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :db-handler\n    :before (fn db-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [db event]} (get-coeffect context)]\n                        (->> (handler-fn db event)\n                             (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n  (->interceptor\n    :id     :fx-handler\n    :before (fn fx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                        (->> (handler-fn coeffects event)\n                             (assoc context :effects))))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n    :id     :ctx-handler\n    :before (fn ctx-handler-before\n              [context]\n              (let [new-context\n                    (trace/with-trace\n                      {:op-type   :event/handler\n                       :operation (get-coeffect context :original-event)}\n                      (handler-fn context))]\n                (trace/merge-trace!\n                  {:tags {:effects   (get-effect new-context)\n                          :coeffects (get-coeffect context)}})\n                new-context))))\n\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        db-store-key :re-frame-path/db-store]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n      :id      :path\n      :before  (fn\n                 [context]\n                 (let [original-db (get-coeffect context :db)]\n                   (-> context\n                       (update db-store-key conj original-db)\n                       (assoc-coeffect :db (get-in original-db path)))))\n      :after   (fn [context]\n                 (let [db-store     (db-store-key context)\n                       original-db  (peek db-store)\n                       new-db-store (pop db-store)\n                       context'     (-> (assoc context db-store-key new-db-store)\n                                        (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                       db           (get-effect context :db ::not-found)]\n                   (if (= db ::not-found)\n                     context'\n                     (->> (assoc-in original-db path db)\n                          (assoc-effect context' :db))))))))\n\n\n\n\n(defn enrich\n  [f]\n  (->interceptor\n    :id :enrich\n    :after (fn enrich-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   prev-db (if (contains? (get-effect context) :db)\n                             (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                             (get-coeffect context :db))\n                   new-db  (f prev-db event)]\n               (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n\n\n(defn after\n  [f]\n  (->interceptor\n    :id :after\n    :after (fn after-after\n             [context]\n             (let [db    (if (contains? (get-effect context) :db)\n                           (get-effect context :db)\n                           (get-coeffect context :db))\n                   event (get-coeffect context :event)]\n               (f db event) ;; call f for side effects\n               context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n    :id    :on-changes\n    :after (fn on-change-after\n             [context]\n             (let [new-db   (get-effect context :db)\n                   old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                   new-ins      (map #(get-in new-db %) in-paths)\n                   old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                   changed-ins? (and (contains? (get-effect context) :db)\n                                     (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n               (if changed-ins?\n                 (->> (apply f new-ins)\n                      (assoc-in new-db out-path)\n                      (assoc-effect context :db))\n                 context)))))\n\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n    :id     :inject-global-interceptors\n    :before (fn inject-global-interceptors-before\n              [context]\n              (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^K",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__36970","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__36977","_","payload","cljs.core/count","cljs.core/map?","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__36984","re-frame.trace/*current-trace*","*current-trace*-temp-val__36985","re-frame.trace/start-trace","end__36741__auto__","re-frame.interop/now","duration__36742__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__36988","cljs.core/--destructure-map","cljs.core.get","map__36989","db","re-frame.interceptor/assoc-effect","new-trace__36743__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__36995","*current-trace*-temp-val__36996","map__36999","map__37001","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__37006","*current-trace*-temp-val__37007","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq37015","self__5755__auto__","cljs.core/seq","args","path","cljs.core/flatten","db-store-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","prev-db","cljs.core/contains?","or__5045__auto__","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq37026","G__37027","cljs.core/first","cljs.core/next","G__37028","self__5754__auto__","out-path","in-paths","old-db","new-ins","p1__37024#","cljs.core.map","old-ins","p1__37025#","changed-ins?","and__5043__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__37029#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$re-frame.interceptor/get-effect","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.trace/traces","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.trace/start-trace","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$cljs.core/dissoc","~$re-frame.std-interceptors/trim-v","~$re-frame.interop/now","~$cljs.core/pop","~$cljs.core/empty?","~$cljs.core/contains?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$cljs.core/get-in","~$cljs.core/swap!","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.std-interceptors/enrich","~$clojure.data/diff","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/flatten","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$cljs.core/nth","~$cljs.core/false?","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$cljs.core/first","~$re-frame.trace/run-tracing-callbacks!","~$cljs.core/merge","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1M","reagent/impl/batching.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"]]],["^1M","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.dom.HtmlElement"]]],["^1M","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1M","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.asserts"]]],["^1M","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1M","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3L","^3M","^3P","^3K","^3N","^3O"]]],["^1M","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3K"]]],["^1M","re_frame/loggers.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","~$clojure.set"]]],["^1M","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P"]]],["^1M","reagent/impl/util.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^3F","^3G","^3I"]]],["^1M","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3L","~$goog.reflect","^3K"]]],["^1M","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1M","re_frame/registrar.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","~$re-frame.interop","^14","^Y"]]],["^1M","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3L","^3K"]]],["^3>","node_modules/scheduler/cjs/scheduler.development.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","44159dfbe389867d6afda50df7f91996366d7206","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C"]]],["^1M","reagent/ratom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^3H","^3F","~$reagent.impl.batching","^3W"]]],["^3>","node_modules/scheduler/cjs/scheduler.production.min.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","e6921f21dd5fc2f4be8cf3c0d6b1b5c611fa4fcd","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C"]]],["^1M","re_frame/interop.cljs"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1M","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1M","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^3>","node_modules/create-react-class/factory.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","d72f12f2bd3d0f344ec47165b99329bd39307659","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","~$module$node_modules$object_assign$index"]]],["^3>","node_modules/react/index.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1M","shadow/js.js"],["1a210884d5768b6760bc73fc64623e915319cb02","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","reagent/impl/template.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^F","^3I","~$clojure.walk","^3H","~$reagent.impl.component","^46","^4:","^3G","^3F"]]],["^1M","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P"]]],["^3>","node_modules/react-dom/cjs/react-dom.production.min.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","16d835d02619d41be201ba16f57c616d0503da6d","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","^F","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1682530547000,1682530547000,1674137975000],["^3>","node_modules/react/cjs/react.development.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","1df918e8981877c2759388dfae58a059e089860d","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C"]]],["^1M","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","^3["]]],["^1M","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.events.ListenableKey"]]],["^1M","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","~$goog.fs.blob","^3S","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3U","^3V"]]],["^1M","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.array","~$goog.events.Listener","~$goog.object"]]],["^1M","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3U","~$goog.html.SafeUrl","^3V","^3P","^3K"]]],["^1M","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4G","~$goog.html.SafeStyle","^4L","^3T","~$goog.html.uncheckedconversions","^3U","^3K"]]],["^1M","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.dom.TagName","^3P","~$goog.dom.element"]]],["^1M","reagent/impl/component.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^H","^F","^3H","^46","^4:","^3G","^3F"]]],["^1M","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z"]]],["^1M","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3U","^4G","^4Q","~$goog.html.SafeStyleSheet","^4L","^4S","^3T","^3V","^3P","^3X","^4I","^4K","^3K","~$goog.dom.tags","^4H"]]],["^1M","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4K"]]],["^1M","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^3>","node_modules/scheduler/index.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","408126fc2241739168bcaf5965ae56a7df143144","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1M","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4I","^3K","^3L"]]],["^1M","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","re_frame/settings.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^45","^14"]]],["^1M","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4I","^3P","^4M","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4S","~$goog.dom.safe","^4P","^4R","~$goog.math.Coordinate","~$goog.math.Size","^4K","~$goog.string","^3U","~$goog.string.Unicode","^3R"]]],["^1M","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.debug.Error","^4Z"]]],["^1M","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4I","^3P","~$goog.collections.maps","^52","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3M"]]],["^1M","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^3>","node_modules/object-assign/index.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","519ffd5a4c91b67302cc9947b794966d629860cd","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C"]]],["^1M","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^42","^3R"]]],["^1M","re_frame/db.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^45"]]],["^1M","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",[]]],["^1M","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4I","^4K"]]],["^1M","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^52","~$goog.string.StringBuffer"]]],["^3>","node_modules/create-react-class/index.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","a7020dbd19046ce80d5d792de4a772ebcb222749","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","^F","~$module$node_modules$create_react_class$factory"]]],["^1M","re_frame/cofx.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^16","^U","~$re-frame.registrar","^14"]]],["^3>","node_modules/react/cjs/react.production.min.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C"]]],["^1M","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P"]]],["^1M","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4[","^4R","^3U","^3K"]]],["^1M","re_frame/interceptor.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^14","^45","^X","^3W"]]],["^1M","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^3W"]]],["^1M","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3K","^3O"]]],["^1M","reagent/core.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^F","~$reagent.impl.template","^4B","^3H","^46","^4:","^3F","^3G","~$reagent.dom"]]],["^1M","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4I","~$goog.debug.errorcontext"]]],["^1M","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.math"]]],["^1M","re_frame/std_interceptors.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]]],["^1M","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.flags"]]],["^1M","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^40","~$goog.dom","^4S","^4O","^3X","^3Y"]]],["^1M","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4Z","^4S"]]],["^1M","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","^4P","^4G","^4Q","^4U","^4L","^3T","^3U","^3K"]]],["^1M","re_frame/utils.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^14"]]],["^1M","reagent/dom.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^D","^3H","^5=","^46","^4:","^3F","^3G"]]],["^1M","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.Disposable","~$goog.events.EventId"]]],["^1M","reagent/interop.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z"]]],["^1M","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.math.Long","~$goog.math.Integer","^52","^4K","^4I","~$goog.Uri","^5:"]]],["^1M","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3U","^3V","^4H","^3P"]]],["^1M","reagent/debug.cljs"],["417ad50ab1583aeb00751336948481695582950e","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z"]]],["^1M","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3U","^4Q","^3V","^4K","^3P","^3K"]]],["^1M","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3[","^3R"]]],["^1M","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3["]]],["^1M","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3R"]]],["^3>","node_modules/react-dom/cjs/react-dom.development.js"],["e966149d24edb843cd9990d50bde318950295405","84bdd29dc1ad7f36c15a36e5014f153db42265ce","47cafc93ea89646f98180be561302225fa2b868d","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^3C","^F","^4C"]]],["^1M","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z"]]],["^1M","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","^52"]]],["^1M","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^3P","^3V"]]],["^1M","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^4<"]]],["^1M","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10"]]],["^1M","re_frame/trace.cljc"],["b7135a76432b8141027ba1f4eb6bb15a36acfb7c","^3?",["^ ","^3@",null,"^3A",["^K",[]],"^3B",["^10","^Z","^45","^14","^4O"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/Lenovo%20X1/.m2/repository/re-frame/re-frame/1.3.0/re-frame-1.3.0.jar!/re_frame/trace.cljc",1675424088000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/interop.clj",1675267976000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1675424088000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/core.clj",1675267976000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/ratom.clj",1675267976000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/re-frame/re-frame/1.3.0/re-frame-1.3.0.jar!/re_frame/interop.clj",1675424088000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1674072759000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1674137975000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/reagent/reagent/0.8.1/reagent-0.8.1.jar!/reagent/debug.clj",1675267976000,"jar:file:/C:/Users/Lenovo%20X1/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1674137975000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^N",["^ "],"^Q",null,"^R",["^ ","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^U","^10","^10","^11","^X","^12","^12","^13","^Y","^14","^14","^15","^12","^T","^T","^W","^W","^16","^16"],"^17",["^K",["^18"]],"^19",["^ ","^1:","^U","^1;","^U","^1<","^U","^1=","^U","^1>","^U","^1?","^U","^1@","^14","^1A","^16"],"~:defs",["^ ","~$unwrap",["^ ","^L","^38","^7","re_frame/std_interceptors.cljc","^8",40,"^9",1,"^:",40,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",40,"^9",6,"^:",40,"^;",12],"~:tag","~$cljs.core/IMap"],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",223,"^9",8,"^:",223,"^;",18,"~:arglists",["^1D",["~$quote",["^1D",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1D",["~$f","^6M","^6N"]]],"^6K",["^1D",[["~$f","^6M","~$&","^6N"]]],"~:arglists-meta",["^1D",[null]]]],"^L","^39","^7","re_frame/std_interceptors.cljc","^;",18,"^6O",["^ ","^6P",true,"^6Q",2,"^6R",2,"^6S",[["^1D",["~$f","^6M","^6N"]]],"^6K",["^1D",[["~$f","^6M","~$&","^6N"]]],"^6T",["^1D",[null]]],"^6S",[["^1D",["~$f","^6M","^6N"]]],"~:protocol-impl",null,"^6Q",2,"^6T",["^1D",[null]],"^9",1,"^6P",true,"~:methods",[["^ ","^6Q",2,"^6P",true,"^6G","^6H"]],"^8",223,"~:ret-tag","~$any","^:",223,"^6R",2,"~:fn-var",true,"^6K",["^1D",[["~$f","^6M","~$&","^6N"]]]],"~$enrich",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",195,"^9",7,"^:",195,"^;",13,"^6K",["^1D",["^6L",["^1D",[["~$f"]]]]]],"^L","^2N","^7","re_frame/std_interceptors.cljc","^;",13,"^6S",["^1D",[["~$f"]]],"^6U",null,"^6T",["^1D",[null,null]],"^9",1,"^6P",false,"^8",195,"^6W","^6H","^:",195,"^6R",1,"^6Y",true,"^6K",["^1D",["^6L",["^1D",[["~$f"]]]]]],"~$path",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",166,"^9",7,"^:",166,"^;",11,"^6K",["^1D",["^6L",["^1D",[["~$&","~$args"]]]]],"^6O",["^ ","^6P",true,"^6Q",0,"^6R",0,"^6S",[["^1D",["^70"]]],"^6K",["^1D",[["~$&","^70"]]],"^6T",["^1D",[null]]]],"^L","^34","^7","re_frame/std_interceptors.cljc","^;",11,"^6O",["^ ","^6P",true,"^6Q",0,"^6R",0,"^6S",[["^1D",["^70"]]],"^6K",["^1D",[["~$&","^70"]]],"^6T",["^1D",[null]]],"^6S",[["^1D",["^70"]]],"^6U",null,"^6Q",0,"^6T",["^1D",[null]],"^9",1,"^6P",true,"^6V",[["^ ","^6Q",0,"^6P",true,"^6G","^6H"]],"^8",166,"^6W","^6X","^:",166,"^6R",0,"^6Y",true,"^6K",["^1D",[["~$&","^70"]]]],"~$ctx-handler->interceptor",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",140,"^9",7,"^:",140,"^;",31,"^6K",["^1D",["^6L",["^1D",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^L","^2P","^7","re_frame/std_interceptors.cljc","^;",31,"^6S",["^1D",[["^72"]]],"^6U",null,"^6T",["^1D",[null,null]],"^9",1,"^6P",false,"^8",140,"^6W","^6H","^:",140,"^6R",1,"^6Y",true,"^6K",["^1D",["^6L",["^1D",[["^72"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^L","^22","^7","re_frame/std_interceptors.cljc","^8",15,"^9",1,"^:",15,"^;",11,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",15,"^9",6,"^:",15,"^;",11],"^6G","^6H"],"~$trim-v",["^ ","^L","^2<","^7","re_frame/std_interceptors.cljc","^8",57,"^9",1,"^:",57,"^;",12,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",57,"^9",6,"^:",57,"^;",12],"^6G","^6H"],"~$after",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",210,"^9",7,"^:",210,"^;",12,"^6K",["^1D",["^6L",["^1D",[["~$f"]]]]]],"^L","^2X","^7","re_frame/std_interceptors.cljc","^;",12,"^6S",["^1D",[["~$f"]]],"^6U",null,"^6T",["^1D",[null,null]],"^9",1,"^6P",false,"^8",210,"^6W","^6H","^:",210,"^6R",1,"^6Y",true,"^6K",["^1D",["^6L",["^1D",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",109,"^9",7,"^:",109,"^;",30,"^6K",["^1D",["^6L",["^1D",[["^72"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^L","^2S","^7","re_frame/std_interceptors.cljc","^;",30,"^6S",["^1D",[["^72"]]],"^6U",null,"^6T",["^1D",[null,null]],"^9",1,"^6P",false,"^8",109,"^6W","^6H","^:",109,"^6R",1,"^6Y",true,"^6K",["^1D",["^6L",["^1D",[["^72"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^6J",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",77,"^9",7,"^:",77,"^;",30,"^6K",["^1D",["^6L",["^1D",[["^72"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^L","^2A","^7","re_frame/std_interceptors.cljc","^;",30,"^6S",["^1D",[["^72"]]],"^6U",null,"^6T",["^1D",[null,null]],"^9",1,"^6P",false,"^8",77,"^6W","^6H","^:",77,"^6R",1,"^6Y",true,"^6K",["^1D",["^6L",["^1D",[["^72"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",247,"^9",6,"^:",247,"^;",32],"^L","^2:","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^8",247,"^:",247,"^6G","^6H","^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1B",["^ ","^X","^X","^11","^X","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^17",["^K",["~:path","~:tags","~:original-event","~:group","~:db","~:fx-handler","~:re-frame.std-interceptors/not-found","~:queue","~:warn","~:operation","~:start","~:duration","~:debug","~:trim-v","~:event/handler","~:db-handler","~:event","~:after","~:id","~:effects","~:inject-global-interceptors","~:error","~:coeffects","~:re-frame-path/db-store","~:end","~:unwrap","~:on-changes","~:groupEnd","~:ctx-handler","~:enrich","~:before","~:op-type","~:log"]],"~:order",["^7L","^7F","^7X","^7Z","^7J","^7K","^7>","^7@","^7=","^7U","^7S","^7B","^7<","^7G","^7I","^7Y","^7C","^7H","^7D","^7E","^7R","^7;","^7M","^7P","^7?","^7V","^7Q","^7O","^7:","^7W","^7T","^7N","^7A"]],"^1I",["^ ","^18",["^K",[]]],"^1J",["^ "],"^1K",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]],"^P","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^3=",[["^82","~:static-fns"],true,["^82","~:shadow-tweaks"],null,["^82","~:source-map-inline"],null,["^82","~:elide-asserts"],false,["^82","~:optimize-constants"],null,["^82","^1P"],null,["^82","~:external-config"],null,["^82","~:tooling-config"],null,["^82","~:emit-constants"],null,["^82","~:load-tests"],null,["^82","~:form-size-threshold"],null,["^82","~:global-goog-object&array"],null,["^82","~:data-readers"],null,["^82","~:infer-externs"],"~:auto",["^82","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^82","~:fn-invoke-direct"],null,["^82","~:source-map"],"/dev/null"]]]