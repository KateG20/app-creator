["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fs-extra/lib/output-file/index.js"],"~:js","shadow$provide.module$node_modules$fs_extra$lib$output_file$index=function(global,require,module,exports){global=require(\"module$node_modules$universalify$index\").fromCallback;const fs=require(\"module$node_modules$graceful_fs$graceful_fs\"),path=require(\"module$node_modules$path_browserify$index\"),mkdir=require(\"module$node_modules$fs_extra$lib$mkdirs$index\"),pathExists=require(\"module$node_modules$fs_extra$lib$path_exists$index\").pathExists;module.exports={outputFile:global(function(file,data,encoding,\ncallback){\"function\"===typeof encoding&&(callback=encoding,encoding=\"utf8\");const dir=path.dirname(file);pathExists(dir,(err$jscomp$0,itDoes)=>{if(err$jscomp$0)return callback(err$jscomp$0);if(itDoes)return fs.writeFile(file,data,encoding,callback);mkdir.mkdirs(dir,err=>{if(err)return callback(err);fs.writeFile(file,data,encoding,callback)})})}),outputFileSync:function(file,...args){const dir=path.dirname(file);if(fs.existsSync(dir))return fs.writeFileSync(file,...args);mkdir.mkdirsSync(dir);fs.writeFileSync(file,\n...args)}}}","~:source","shadow$provide[\"module$node_modules$fs_extra$lib$output_file$index\"] = function(global,require,module,exports) {\n'use strict'\n\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\n\nfunction outputFile (file, data, encoding, callback) {\n  if (typeof encoding === 'function') {\n    callback = encoding\n    encoding = 'utf8'\n  }\n\n  const dir = path.dirname(file)\n  pathExists(dir, (err, itDoes) => {\n    if (err) return callback(err)\n    if (itDoes) return fs.writeFile(file, data, encoding, callback)\n\n    mkdir.mkdirs(dir, err => {\n      if (err) return callback(err)\n\n      fs.writeFile(file, data, encoding, callback)\n    })\n  })\n}\n\nfunction outputFileSync (file, ...args) {\n  const dir = path.dirname(file)\n  if (fs.existsSync(dir)) {\n    return fs.writeFileSync(file, ...args)\n  }\n  mkdir.mkdirsSync(dir)\n  fs.writeFileSync(file, ...args)\n}\n\nmodule.exports = {\n  outputFile: u(outputFile),\n  outputFileSync\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fs_extra$lib$path_exists$index","~$module$node_modules$universalify$index","~$shadow.js","~$module$node_modules$path_browserify$index","~$module$node_modules$graceful_fs$graceful_fs","~$module$node_modules$fs_extra$lib$mkdirs$index"]],"~:properties",["^5",["outputFile","outputFileSync"]],"~:compiled-at",1683799130905,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fs_extra$lib$output_file$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,kDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGzGC,MAAAA,CAAIH,OAAA,CAAQ,wCAAR,CAAwBI,CAAAA,YAClC,OAAMC,GAAKL,OAAA,CAAQ,6CAAR,CAAX,CACMM,KAAON,OAAA,CAAQ,2CAAR,CADb,CAEMO,MAAQP,OAAA,CAAQ,+CAAR,CAFd,CAGMQ,WAAaR,OAAA,CAAQ,oDAAR,CAA0BQ,CAAAA,UA8B7CP,OAAOC,CAAAA,OAAP,CAAiB,CACfO,WAAYN,MAAA,CA7BdM,QAAoB,CAACC,IAAD,CAAOC,IAAP,CAAaC,QAAb;AAAuBC,QAAvB,CAAiC,CAC3B,UAAxB,GAAI,MAAOD,SAAX,GACEC,QACA,CADWD,QACX,CAAAA,QAAA,CAAW,MAFb,CAKA,OAAME,IAAMR,IAAKS,CAAAA,OAAL,CAAaL,IAAb,CACZF,WAAA,CAAWM,GAAX,CAAgB,CAACE,YAAD,CAAMC,MAAN,CAAA,EAAiB,CAC/B,GAAID,YAAJ,CAAS,MAAOH,SAAA,CAASG,YAAT,CAChB,IAAIC,MAAJ,CAAY,MAAOZ,GAAGa,CAAAA,SAAH,CAAaR,IAAb,CAAmBC,IAAnB,CAAyBC,QAAzB,CAAmCC,QAAnC,CAEnBN,MAAMY,CAAAA,MAAN,CAAaL,GAAb,CAAkBE,GAAA,EAAO,CACvB,GAAIA,GAAJ,CAAS,MAAOH,SAAA,CAASG,GAAT,CAEhBX,GAAGa,CAAAA,SAAH,CAAaR,IAAb,CAAmBC,IAAnB,CAAyBC,QAAzB,CAAmCC,QAAnC,CAHuB,CAAzB,CAJ+B,CAAjC,CAPmD,CA6BvC,CADG,CAEfO,eAXFA,QAAwB,CAACV,IAAD,CAAO,GAAGW,IAAV,CAAgB,CACtC,MAAMP,IAAMR,IAAKS,CAAAA,OAAL,CAAaL,IAAb,CACZ,IAAIL,EAAGiB,CAAAA,UAAH,CAAcR,GAAd,CAAJ,CACE,MAAOT,GAAGkB,CAAAA,aAAH,CAAiBb,IAAjB,CAAuB,GAAGW,IAA1B,CAETd,MAAMiB,CAAAA,UAAN,CAAiBV,GAAjB,CACAT,GAAGkB,CAAAA,aAAH,CAAiBb,IAAjB;AAAuB,GAAGW,IAA1B,CANsC,CASvB,CArC8F;\",\n\"sources\":[\"node_modules/fs-extra/lib/output-file/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fs_extra$lib$output_file$index\\\"] = function(global,require,module,exports) {\\n'use strict'\\n\\nconst u = require('universalify').fromCallback\\nconst fs = require('graceful-fs')\\nconst path = require('path')\\nconst mkdir = require('../mkdirs')\\nconst pathExists = require('../path-exists').pathExists\\n\\nfunction outputFile (file, data, encoding, callback) {\\n  if (typeof encoding === 'function') {\\n    callback = encoding\\n    encoding = 'utf8'\\n  }\\n\\n  const dir = path.dirname(file)\\n  pathExists(dir, (err, itDoes) => {\\n    if (err) return callback(err)\\n    if (itDoes) return fs.writeFile(file, data, encoding, callback)\\n\\n    mkdir.mkdirs(dir, err => {\\n      if (err) return callback(err)\\n\\n      fs.writeFile(file, data, encoding, callback)\\n    })\\n  })\\n}\\n\\nfunction outputFileSync (file, ...args) {\\n  const dir = path.dirname(file)\\n  if (fs.existsSync(dir)) {\\n    return fs.writeFileSync(file, ...args)\\n  }\\n  mkdir.mkdirsSync(dir)\\n  fs.writeFileSync(file, ...args)\\n}\\n\\nmodule.exports = {\\n  outputFile: u(outputFile),\\n  outputFileSync\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"u\",\"fromCallback\",\"fs\",\"path\",\"mkdir\",\"pathExists\",\"outputFile\",\"file\",\"data\",\"encoding\",\"callback\",\"dir\",\"dirname\",\"err\",\"itDoes\",\"writeFile\",\"mkdirs\",\"outputFileSync\",\"args\",\"existsSync\",\"writeFileSync\",\"mkdirsSync\"]\n}\n"]