["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fs-extra/lib/move/move-sync.js"],"~:js","shadow$provide.module$node_modules$fs_extra$lib$move$move_sync=function(global,require,module,exports){const fs=require(\"module$node_modules$graceful_fs$graceful_fs\"),path=require(\"module$node_modules$path_browserify$index\"),copySync=require(\"module$node_modules$fs_extra$lib$copy$index\").copySync,removeSync=require(\"module$node_modules$fs_extra$lib$remove$index\").removeSync,mkdirpSync=require(\"module$node_modules$fs_extra$lib$mkdirs$index\").mkdirpSync,stat=require(\"module$node_modules$fs_extra$lib$util$stat\");\nmodule.exports=function(src,dest,opts){opts=opts||{};const overwrite=opts.overwrite||opts.clobber||!1,{srcStat,isChangingCase=!1}=stat.checkPathsSync(src,dest,\"move\",opts);stat.checkParentPathsSync(src,srcStat,dest,\"move\");opts=path.dirname(dest);path.parse(opts).root===opts||mkdirpSync(path.dirname(dest));if(!isChangingCase)if(overwrite)removeSync(dest);else if(fs.existsSync(dest))throw Error(\"dest already exists.\");b:{try{fs.renameSync(src,dest)}catch(err){if(\"EXDEV\"!==err.code)throw err;copySync(src,\ndest,{overwrite,errorOnExist:!0,preserveTimestamps:!0});src=removeSync(src);break b}src=void 0}return src}}","~:source","shadow$provide[\"module$node_modules$fs_extra$lib$move$move_sync\"] = function(global,require,module,exports) {\n'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copySync = require('../copy').copySync\nconst removeSync = require('../remove').removeSync\nconst mkdirpSync = require('../mkdirs').mkdirpSync\nconst stat = require('../util/stat')\n\nfunction moveSync (src, dest, opts) {\n  opts = opts || {}\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'move')\n  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase) {\n  if (isChangingCase) return rename(src, dest, overwrite)\n  if (overwrite) {\n    removeSync(dest)\n    return rename(src, dest, overwrite)\n  }\n  if (fs.existsSync(dest)) throw new Error('dest already exists.')\n  return rename(src, dest, overwrite)\n}\n\nfunction rename (src, dest, overwrite) {\n  try {\n    fs.renameSync(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') throw err\n    return moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nfunction moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copySync(src, dest, opts)\n  return removeSync(src)\n}\n\nmodule.exports = moveSync\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$fs_extra$lib$util$stat","~$shadow.js","~$module$node_modules$path_browserify$index","~$module$node_modules$fs_extra$lib$remove$index","~$module$node_modules$graceful_fs$graceful_fs","~$module$node_modules$fs_extra$lib$copy$index","~$module$node_modules$fs_extra$lib$mkdirs$index"]],"~:properties",["^5",["errorOnExist","preserveTimestamps","overwrite"]],"~:compiled-at",1683799130909,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fs_extra$lib$move$move_sync.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5G,MAAMC,GAAKH,OAAA,CAAQ,6CAAR,CAAX,CACMI,KAAOJ,OAAA,CAAQ,2CAAR,CADb,CAEMK,SAAWL,OAAA,CAAQ,6CAAR,CAAmBK,CAAAA,QAFpC,CAGMC,WAAaN,OAAA,CAAQ,+CAAR,CAAqBM,CAAAA,UAHxC,CAIMC,WAAaP,OAAA,CAAQ,+CAAR,CAAqBO,CAAAA,UAJxC,CAKMC,KAAOR,OAAA,CAAQ,4CAAR,CA+CbC;MAAOC,CAAAA,OAAP,CA7CAO,QAAkB,CAACC,GAAD,CAAMC,IAAN,CAAYC,IAAZ,CAAkB,CAClCA,IAAA,CAAOA,IAAP,EAAe,EACf,OAAMC,UAAYD,IAAKC,CAAAA,SAAjBA,EAA8BD,IAAKE,CAAAA,OAAnCD,EAA8C,CAAA,CAApD,CAEM,CAAEE,OAAF,CAAWC,cAAA,CAAiB,CAAA,CAA5B,CAAA,CAAsCR,IAAKS,CAAAA,cAAL,CAAoBP,GAApB,CAAyBC,IAAzB,CAA+B,MAA/B,CAAuCC,IAAvC,CAC5CJ,KAAKU,CAAAA,oBAAL,CAA0BR,GAA1B,CAA+BK,OAA/B,CAAwCJ,IAAxC,CAA8C,MAA9C,CAMMQ,KAAAA,CAASf,IAAKgB,CAAAA,OAAL,CALGT,IAKH,CACIP,KAAKiB,CAAAA,KAALC,CAAWH,IAAXG,CACDC,CAAAA,IAPlB,GAO2BJ,IAP3B,EAAyBZ,UAAA,CAAWH,IAAKgB,CAAAA,OAAL,CAAaT,IAAb,CAAX,CAWzB,IAVsCK,CAAAA,cAUtC,CACA,GAX2BH,SAW3B,CACEP,UAAA,CAZmBK,IAYnB,CADF,KAIA,IAAIR,EAAGqB,CAAAA,UAAH,CAfiBb,IAejB,CAAJ,CAAyB,KAAUc,MAAJ,CAAU,sBAAV,CAAN,CAIY,CAAA,CAAA,CACrC,GAAI,CACFtB,EAAGuB,CAAAA,UAAH,CArBchB,GAqBd,CArBmBC,IAqBnB,CADE,CAEF,MAAOgB,GAAP,CAAY,CACZ,GAAiB,OAAjB,GAAIA,GAAIC,CAAAA,IAAR,CAA0B,KAAMD,IAAN,CAW5BtB,QAAA,CAlCgBK,GAkChB;AAlCqBC,IAkCrB,CALaC,CA7BcC,SA6BdD,CAEXiB,aAAc,CAAA,CAFHjB,CAGXkB,mBAAoB,CAAA,CAHTlB,CAKb,CAVE,IAAA,CAWKN,UAAA,CAnCSI,GAmCT,CAXL,OAAA,CAFY,CAHuB,GAAA,CAAA,IAAA,EAAA,CAnBrC,MAAO,IAP2B,CAVwE;\",\n\"sources\":[\"node_modules/fs-extra/lib/move/move-sync.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fs_extra$lib$move$move_sync\\\"] = function(global,require,module,exports) {\\n'use strict'\\n\\nconst fs = require('graceful-fs')\\nconst path = require('path')\\nconst copySync = require('../copy').copySync\\nconst removeSync = require('../remove').removeSync\\nconst mkdirpSync = require('../mkdirs').mkdirpSync\\nconst stat = require('../util/stat')\\n\\nfunction moveSync (src, dest, opts) {\\n  opts = opts || {}\\n  const overwrite = opts.overwrite || opts.clobber || false\\n\\n  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)\\n  stat.checkParentPathsSync(src, srcStat, dest, 'move')\\n  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))\\n  return doRename(src, dest, overwrite, isChangingCase)\\n}\\n\\nfunction isParentRoot (dest) {\\n  const parent = path.dirname(dest)\\n  const parsedPath = path.parse(parent)\\n  return parsedPath.root === parent\\n}\\n\\nfunction doRename (src, dest, overwrite, isChangingCase) {\\n  if (isChangingCase) return rename(src, dest, overwrite)\\n  if (overwrite) {\\n    removeSync(dest)\\n    return rename(src, dest, overwrite)\\n  }\\n  if (fs.existsSync(dest)) throw new Error('dest already exists.')\\n  return rename(src, dest, overwrite)\\n}\\n\\nfunction rename (src, dest, overwrite) {\\n  try {\\n    fs.renameSync(src, dest)\\n  } catch (err) {\\n    if (err.code !== 'EXDEV') throw err\\n    return moveAcrossDevice(src, dest, overwrite)\\n  }\\n}\\n\\nfunction moveAcrossDevice (src, dest, overwrite) {\\n  const opts = {\\n    overwrite,\\n    errorOnExist: true,\\n    preserveTimestamps: true\\n  }\\n  copySync(src, dest, opts)\\n  return removeSync(src)\\n}\\n\\nmodule.exports = moveSync\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"fs\",\"path\",\"copySync\",\"removeSync\",\"mkdirpSync\",\"stat\",\"moveSync\",\"src\",\"dest\",\"opts\",\"overwrite\",\"clobber\",\"srcStat\",\"isChangingCase\",\"checkPathsSync\",\"checkParentPathsSync\",\"parent\",\"dirname\",\"parse\",\"parsedPath\",\"root\",\"existsSync\",\"Error\",\"renameSync\",\"err\",\"code\",\"errorOnExist\",\"preserveTimestamps\"]\n}\n"]