["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/fs-extra/lib/mkdirs/make-dir.js"],"~:js","shadow$provide.module$node_modules$fs_extra$lib$mkdirs$make_dir=function(global,require,module,exports){const fs=require(\"module$node_modules$fs_extra$lib$fs$index\"),{checkPath}=require(\"module$node_modules$fs_extra$lib$mkdirs$utils\");module.exports.makeDir=async(dir,options)=>{checkPath(dir);return fs.mkdir(dir,{mode:\"number\"===typeof options?options:{mode:511,...options}.mode,recursive:!0})};module.exports.makeDirSync=(dir,options)=>{checkPath(dir);return fs.mkdirSync(dir,{mode:\"number\"===typeof options?\noptions:{mode:511,...options}.mode,recursive:!0})}}","~:source","shadow$provide[\"module$node_modules$fs_extra$lib$mkdirs$make_dir\"] = function(global,require,module,exports) {\n'use strict'\nconst fs = require('../fs')\nconst { checkPath } = require('./utils')\n\nconst getMode = options => {\n  const defaults = { mode: 0o777 }\n  if (typeof options === 'number') return options\n  return ({ ...defaults, ...options }).mode\n}\n\nmodule.exports.makeDir = async (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdir(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n\nmodule.exports.makeDirSync = (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdirSync(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$fs_extra$lib$mkdirs$utils","~$module$node_modules$fs_extra$lib$fs$index"]],"~:properties",["^5",["makeDirSync","makeDir","mode","recursive"]],"~:compiled-at",1683799130885,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$fs_extra$lib$mkdirs$make_dir.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAE7G,MAAMC,GAAKH,OAAA,CAAQ,2CAAR,CAAX,CACM,CAAEI,SAAF,CAAA,CAAgBJ,OAAA,CAAQ,+CAAR,CAQtBC,OAAOC,CAAAA,OAAQG,CAAAA,OAAf,CAAyBC,KAAM,CAACC,GAAD,CAAMC,OAAN,CAANF,EAAwB,CAC/CF,SAAA,CAAUG,GAAV,CAEA,OAAOJ,GAAGM,CAAAA,KAAH,CAASF,GAAT,CAAc,CACnBG,KARqB,QAAvB,GAAI,MAQYF,QARhB,CAQgBA,OARhB,CACQ,CAFWE,KAAM,GAEjB,CAAe,GAOPF,OAPR,CAA6BE,CAAAA,IAMhB,CAEnBC,UAAW,CAAA,CAFQ,CAAd,CAHwC,CASjDV,OAAOC,CAAAA,OAAQU,CAAAA,WAAf,CAA6B,CAACL,GAAD,CAAMC,OAAN,CAAAK,EAAkB,CAC7CT,SAAA,CAAUG,GAAV,CAEA,OAAOJ,GAAGW,CAAAA,SAAH,CAAaP,GAAb,CAAkB,CACvBG,KAjBqB,QAAvB,GAAI,MAiBYF,QAjBhB;AAiBgBA,OAjBhB,CACQ,CAFWE,KAAM,GAEjB,CAAe,GAgBPF,OAhBR,CAA6BE,CAAAA,IAeZ,CAEvBC,UAAW,CAAA,CAFY,CAAlB,CAHsC,CApB8D;\",\n\"sources\":[\"node_modules/fs-extra/lib/mkdirs/make-dir.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$fs_extra$lib$mkdirs$make_dir\\\"] = function(global,require,module,exports) {\\n'use strict'\\nconst fs = require('../fs')\\nconst { checkPath } = require('./utils')\\n\\nconst getMode = options => {\\n  const defaults = { mode: 0o777 }\\n  if (typeof options === 'number') return options\\n  return ({ ...defaults, ...options }).mode\\n}\\n\\nmodule.exports.makeDir = async (dir, options) => {\\n  checkPath(dir)\\n\\n  return fs.mkdir(dir, {\\n    mode: getMode(options),\\n    recursive: true\\n  })\\n}\\n\\nmodule.exports.makeDirSync = (dir, options) => {\\n  checkPath(dir)\\n\\n  return fs.mkdirSync(dir, {\\n    mode: getMode(options),\\n    recursive: true\\n  })\\n}\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"fs\",\"checkPath\",\"makeDir\",\"module.exports.makeDir\",\"dir\",\"options\",\"mkdir\",\"mode\",\"recursive\",\"makeDirSync\",\"module.exports.makeDirSync\",\"mkdirSync\"]\n}\n"]